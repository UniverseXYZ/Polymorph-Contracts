{"metadata":"{\"compiler\":{\"version\":\"0.8.9\"},\"sources\":{\"contracts/mainnet/PolymorphRoot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPolymorphRoot.sol\\\";\\nimport \\\"../base/Polymorph.sol\\\";\\nimport \\\"../base/PolymorphWithGeneChanger.sol\\\";\\n\\ncontract PolymorphRoot is PolymorphWithGeneChanger, IPolymorphRoot {\\n    using PolymorphGeneGenerator for PolymorphGeneGenerator.Gene;\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n\\n    struct Params {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        address payable _daoAddress;\\n        uint256 premintedTokensCount;\\n        uint256 _baseGenomeChangePrice;\\n        uint256 _polymorphPrice;\\n        uint256 _maxSupply;\\n        uint256 _randomizeGenomePrice;\\n        uint256 _bulkBuyLimit;\\n        string _arweaveAssetsJSON;\\n        address _polymorphV1Address;\\n    }\\n\\n    uint256 public polymorphPrice;\\n    uint256 public maxSupply;\\n    uint256 public bulkBuyLimit;\\n\\n    Polymorph public polymorphV1Contract;\\n    uint256 public totalBurnedV1;\\n\\n    event PolymorphPriceChanged(uint256 newPolymorphPrice);\\n    event MaxSupplyChanged(uint256 newMaxSupply);\\n    event BulkBuyLimitChanged(uint256 newBulkBuyLimit);\\n\\n    constructor(\\n        Params memory params\\n    )\\n        PolymorphWithGeneChanger(\\n            params.name,\\n            params.symbol,\\n            params.baseURI,\\n            params._daoAddress,\\n            params._baseGenomeChangePrice,\\n            params._randomizeGenomePrice,\\n            params._arweaveAssetsJSON\\n        )\\n    {\\n            polymorphPrice = params._polymorphPrice;\\n            maxSupply = params._maxSupply;\\n\\n            bulkBuyLimit = params._bulkBuyLimit;\\n\\n            arweaveAssetsJSON = params._arweaveAssetsJSON;\\n            polymorphV1Contract = Polymorph(params._polymorphV1Address);\\n            geneGenerator.random();\\n\\n            _preMint(params.premintedTokensCount);\\n    }\\n\\n    function _preMint(uint256 amountToMint) internal {\\n        for (uint256 i = 0; i < amountToMint; i++) {\\n            _tokenIdTracker.increment();\\n            uint256 tokenId = _tokenIdTracker.current();\\n            _genes[tokenId] = geneGenerator.random();\\n            _mint(_msgSender(), tokenId);\\n        }\\n    }\\n\\n    function mint() public payable override nonReentrant {\\n        require(_tokenIdTracker.current() < maxSupply, \\\"Total supply reached\\\");\\n\\n        _tokenIdTracker.increment();\\n\\n        uint256 tokenId = _tokenIdTracker.current();\\n        _genes[tokenId] = geneGenerator.random();\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{value: polymorphPrice}(\\n            \\\"\\\"\\n        );\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(polymorphPrice);\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        _mint(_msgSender(), tokenId);\\n\\n        emit TokenMinted(tokenId, _genes[tokenId]);\\n        emit TokenMorphed(\\n            tokenId,\\n            0,\\n            _genes[tokenId],\\n            polymorphPrice,\\n            PolymorphEventType.MINT\\n        );\\n    }\\n\\n    function burnAndMintNewPolymorph(uint256 tokenId) external nonReentrant {\\n        require(_msgSender() == polymorphV1Contract.ownerOf(tokenId));\\n\\n        uint256 geneToTransfer = polymorphV1Contract.geneOf(tokenId);\\n        polymorphV1Contract.burn(tokenId);\\n\\n        totalBurnedV1 = totalBurnedV1.add(1);\\n        maxSupply = maxSupply.add(1); // 10001\\n        _tokenIdTracker.increment();\\n\\n        uint256 newTokenId = _tokenIdTracker.current();\\n        // uint256 newTokenId = tokenId;\\n        _genes[newTokenId] = geneToTransfer;\\n\\n        _mint(_msgSender(), newTokenId);\\n\\n        emit TokenMinted(newTokenId, _genes[newTokenId]);\\n        emit TokenBurnedAndMinted(tokenId, newTokenId, _genes[newTokenId]);\\n    }\\n\\n    function bulkBuy(uint256 amount) public payable override nonReentrant {\\n        require(\\n            amount <= bulkBuyLimit,\\n            \\\"Cannot bulk buy more than the preset limit\\\"\\n        );\\n        require(\\n            _tokenIdTracker.current().add(amount) <= maxSupply,\\n            \\\"Total supply reached\\\"\\n        );\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{\\n            value: polymorphPrice.mul(amount)\\n        }(\\\"\\\");\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(polymorphPrice.mul(amount));\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            _tokenIdTracker.increment();\\n\\n            uint256 tokenId = _tokenIdTracker.current();\\n            _genes[tokenId] = geneGenerator.random();\\n            _mint(_msgSender(), tokenId);\\n\\n            emit TokenMinted(tokenId, _genes[tokenId]);\\n            emit TokenMorphed(\\n                tokenId,\\n                0,\\n                _genes[tokenId],\\n                polymorphPrice,\\n                PolymorphEventType.MINT\\n            );\\n        }\\n    }\\n\\n    function mint(address to)\\n        public\\n        pure\\n        override(ERC721PresetMinterPauserAutoId)\\n    {\\n        revert(\\\"Should not use this one\\\");\\n    }\\n\\n    function setPolymorphPrice(uint256 newPolymorphPrice)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        polymorphPrice = newPolymorphPrice;\\n\\n        emit PolymorphPriceChanged(newPolymorphPrice);\\n    }\\n\\n    function setMaxSupply(uint256 _maxSupply) public virtual override onlyDAO {\\n        maxSupply = _maxSupply;\\n\\n        emit MaxSupplyChanged(maxSupply);\\n    }\\n\\n    function setBulkBuyLimit(uint256 _bulkBuyLimit)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        bulkBuyLimit = _bulkBuyLimit;\\n\\n        emit BulkBuyLimitChanged(_bulkBuyLimit);\\n    }\\n\\n    receive() external payable {\\n        mint();\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"contracts/mainnet/IPolymorphRoot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPolymorphRoot is IERC721 {\\n    function mint() external payable;\\n\\n    function bulkBuy(uint256 amount) external payable;\\n\\n    function setPolymorphPrice(uint256 newPolymorphPrice) external;\\n\\n    function setMaxSupply(uint256 maxSupply) external;\\n\\n    function setBulkBuyLimit(uint256 bulkBuyLimit) external;\\n}\\n\"},\"contracts/base/IPolymorph.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPolymorph is IERC721 {\\n    function geneOf(uint256 tokenId) external view returns (uint256 gene);\\n\\n    function lastTokenId() external view returns (uint256 tokenId);\\n\\n    function setBaseURI(string memory _baseURI) external;\\n\\n    function setArweaveAssetsJSON(string memory _arweaveAssetsJSON) external;\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"},\"contracts/base/IERC721Consumable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title ERC-721 Consumer Role extension\\n///  Note: the ERC-165 identifier for this interface is 0x953c8dfa\\ninterface IERC721Consumable is IERC721 {\\n\\n    /// @notice Emitted when `owner` changes the `consumer` of an NFT\\n    /// The zero address for consumer indicates that there is no consumer address\\n    /// When a Transfer event emits, this also indicates that the consumer address\\n    /// for that NFT (if any) is set to none\\n    event ConsumerChanged(address indexed owner, address indexed consumer, uint256 indexed tokenId);\\n\\n    /// @notice Get the consumer address of an NFT\\n    /// @dev The zero address indicates that there is no consumer\\n    /// Throws if `_tokenId` is not a valid NFT\\n    /// @param _tokenId The NFT to get the consumer address for\\n    /// @return The consumer address for this NFT, or the zero address if there is none\\n    function consumerOf(uint256 _tokenId) view external returns (address);\\n\\n    /// @notice Change or reaffirm the consumer address for an NFT\\n    /// @dev The zero address indicates there is no consumer address\\n    /// Throws unless `msg.sender` is the current NFT owner, an authorised\\n    /// operator of the current owner or approved address\\n    /// Throws if `_tokenId` is not valid NFT\\n    /// @param _consumer The new consumer of the NFT\\n    function changeConsumer(address _consumer, uint256 _tokenId) external;\\n}\"},\"contracts/base/ERC721Consumable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./IERC721Consumable.sol\\\";\\n\\nabstract contract ERC721Consumable is IERC721Consumable, ERC721 {\\n    // Mintable\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    // Mapping from token ID to consumer address\\n    mapping(uint256 => address) _tokenConsumers;\\n\\n    // // Do we need constructor and mint ?\\n    // constructor() ERC721(\\\"ReferenceImpl\\\", \\\"RIMPL\\\") {\\n    // }\\n\\n    // // @notice Mints new NFT to msg.sender\\n    // function mint() external returns (uint256) {\\n    //     _tokenIds.increment();\\n    //     uint256 newItemId = _tokenIds.current();\\n    //     _mint(msg.sender, newItemId);\\n\\n    //     return newItemId;\\n    // }\\n\\n    /**\\n     * @dev See {IERC721Consumable-consumerOf}\\n     */\\n    function consumerOf(uint256 _tokenId) view external returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Consumable: consumer query for nonexistent token\\\");\\n        return _tokenConsumers[_tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Consumable-changeConsumer}\\n     */\\n    function changeConsumer(address _consumer, uint256 _tokenId) external {\\n        address owner = this.ownerOf(_tokenId);\\n        require(msg.sender == owner ||\\n            msg.sender == getApproved(_tokenId) ||\\n            isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721Consumable: changeConsumer caller is not owner nor approved\\\");\\n        _changeConsumer(owner, _consumer, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Changes the consumer\\n     * Requirement: `tokenId` must exist\\n     */\\n    function _changeConsumer(address _owner, address _consumer, uint256 _tokenId) internal {\\n        _tokenConsumers[_tokenId] = _consumer;\\n        emit ConsumerChanged(_owner, _consumer, _tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Consumable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override (ERC721) {\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n\\n        _changeConsumer(_from, address(0), _tokenId);\\n    }\\n\\n}\"},\"contracts/base/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"./ERC721Consumable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is\\n    Context,\\n    AccessControlEnumerable,\\n    ERC721Consumable,\\n    ERC721Enumerable,\\n    ERC721Burnable,\\n    ERC721Pausable\\n{\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter internal _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseTokenURI = baseURI_;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function baseURI() external view virtual  returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Consumable, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721, ERC721Consumable, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"},\"contracts/lib/PolymorphGeneGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary PolymorphGeneGenerator {\\n\\n    struct Gene {\\n\\t\\tuint256 lastRandom;\\n    }\\n\\n    function random(Gene storage g) internal returns (uint256) {\\n\\t\\tg.lastRandom = uint256(keccak256(abi.encode(keccak256(abi.encodePacked(msg.sender, tx.origin, gasleft(), g.lastRandom, block.timestamp, block.number, blockhash(block.number), blockhash(block.number-100))))));\\n\\t\\treturn g.lastRandom;\\n    }\\n\\n}\"},\"contracts/modifiers/DAOControlled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract DAOControlled {\\n    address payable public daoAddress;\\n\\n    constructor(address payable _daoAddress) {\\n        daoAddress = _daoAddress;\\n    }\\n\\n    modifier onlyDAO() {\\n        require(msg.sender == daoAddress, \\\"Not called from the dao\\\");\\n        _;\\n    }\\n}\\n\"},\"contracts/base/Polymorph.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport \\\"./IPolymorph.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../base/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"../lib/PolymorphGeneGenerator.sol\\\";\\nimport \\\"../modifiers/DAOControlled.sol\\\";\\n\\nabstract contract Polymorph is\\n    IPolymorph,\\n    ERC721PresetMinterPauserAutoId,\\n    ReentrancyGuard,\\n    DAOControlled\\n{\\n    using Counters for Counters.Counter;\\n    using PolymorphGeneGenerator for PolymorphGeneGenerator.Gene;\\n\\n    PolymorphGeneGenerator.Gene internal geneGenerator;\\n    mapping(uint256 => uint256) internal _genes;\\n    string public arweaveAssetsJSON;\\n\\n    event TokenMorphed(\\n        uint256 indexed tokenId,\\n        uint256 oldGene,\\n        uint256 newGene,\\n        uint256 price,\\n        PolymorphEventType eventType\\n    );\\n    event TokenMinted(uint256 indexed tokenId, uint256 newGene);\\n    event TokenBurnedAndMinted(\\n        uint256 indexed oldTokenId,\\n        uint256 indexed newTokenId,\\n        uint256 gene\\n    );\\n    event BaseURIChanged(string baseURI);\\n    event ArweaveAssetsJSONChanged(string arweaveAssetsJSON);\\n\\n    enum PolymorphEventType {\\n        MINT,\\n        MORPH,\\n        TRANSFER\\n    }\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        address payable _daoAddress,\\n        string memory _arweaveAssetsJSON\\n    )\\n        DAOControlled(_daoAddress)\\n        ERC721PresetMinterPauserAutoId(name, symbol, baseURI)\\n    {\\n        arweaveAssetsJSON = _arweaveAssetsJSON;\\n    }\\n\\n    function geneOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 gene)\\n    {\\n        return _genes[tokenId];\\n    }\\n\\n    function lastTokenId() public view override returns (uint256 tokenId) {\\n        return _tokenIdTracker.current();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721PresetMinterPauserAutoId) {\\n        ERC721PresetMinterPauserAutoId._beforeTokenTransfer(from, to, tokenId);\\n        emit TokenMorphed(\\n            tokenId,\\n            _genes[tokenId],\\n            _genes[tokenId],\\n            0,\\n            PolymorphEventType.TRANSFER\\n        );\\n    }\\n\\n    function setBaseURI(string memory _baseURI)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        _setBaseURI(_baseURI);\\n\\n        emit BaseURIChanged(_baseURI);\\n    }\\n\\n    function setArweaveAssetsJSON(string memory _arweaveAssetsJSON)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        arweaveAssetsJSON = _arweaveAssetsJSON;\\n\\n        emit ArweaveAssetsJSONChanged(_arweaveAssetsJSON);\\n    }\\n}\\n\"},\"contracts/modifiers/TunnelEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract TunnelEnabled {\\n    mapping(address => bool) public whitelistTunnelAddresses;\\n\\n    modifier onlyTunnel() {\\n        require(\\n            whitelistTunnelAddresses[msg.sender],\\n            \\\"Not called from the tunnel\\\"\\n        );\\n        _;\\n    }\\n}\\n\"},\"contracts/base/IPolymorphWithGeneChanger.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPolymorphWithGeneChanger {\\n    function morphGene(uint256 tokenId, uint256 genePosition) external payable;\\n\\n    function randomizeGenome(uint256 tokenId) external payable;\\n\\n    function priceForGenomeChange(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 price);\\n\\n    function changeBaseGenomeChangePrice(uint256 newGenomeChangePrice) external;\\n\\n    function changeRandomizeGenomePrice(uint256 newRandomizeGenomePrice)\\n        external;\\n\\n    function whitelistBridgeAddress(address bridgeAddress, bool status)\\n        external;\\n\\n    function genomeChanges(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 genomeChnages);\\n}\\n\"},\"contracts/base/PolymorphWithGeneChanger.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../lib/PolymorphGeneGenerator.sol\\\";\\nimport \\\"../modifiers/TunnelEnabled.sol\\\";\\nimport \\\"./Polymorph.sol\\\";\\nimport \\\"./IPolymorphWithGeneChanger.sol\\\";\\n\\nabstract contract PolymorphWithGeneChanger is\\n    IPolymorphWithGeneChanger,\\n    Polymorph,\\n    TunnelEnabled\\n{\\n    using PolymorphGeneGenerator for PolymorphGeneGenerator.Gene;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(uint256 => uint256) internal _genomeChanges;\\n    mapping(uint256 => bool) public isNotVirgin;\\n    uint256 public baseGenomeChangePrice;\\n    uint256 public randomizeGenomePrice;\\n\\n    event BaseGenomeChangePriceChanged(uint256 newGenomeChange);\\n    event RandomizeGenomePriceChanged(uint256 newRandomizeGenomePriceChange);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        address payable _daoAddress,\\n        uint256 _baseGenomeChangePrice,\\n        uint256 _randomizeGenomePrice,\\n        string memory _arweaveAssetsJSON\\n    ) Polymorph(name, symbol, baseURI, _daoAddress, _arweaveAssetsJSON) {\\n        baseGenomeChangePrice = _baseGenomeChangePrice;\\n        randomizeGenomePrice = _randomizeGenomePrice;\\n    }\\n\\n    function changeBaseGenomeChangePrice(uint256 newGenomeChangePrice)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        baseGenomeChangePrice = newGenomeChangePrice;\\n        emit BaseGenomeChangePriceChanged(newGenomeChangePrice);\\n    }\\n\\n    function changeRandomizeGenomePrice(uint256 newRandomizeGenomePrice)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        randomizeGenomePrice = newRandomizeGenomePrice;\\n        emit RandomizeGenomePriceChanged(newRandomizeGenomePrice);\\n    }\\n\\n    function morphGene(uint256 tokenId, uint256 genePosition)\\n        public\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n    {\\n        require(genePosition > 0, \\\"Base character not morphable\\\");\\n        _beforeGenomeChange(tokenId);\\n        uint256 price = priceForGenomeChange(tokenId);\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{value: price}(\\\"\\\");\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(price);\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        uint256 oldGene = _genes[tokenId];\\n        uint256 newTrait = geneGenerator.random() % 100;\\n        _genes[tokenId] = replaceGene(oldGene, newTrait, genePosition);\\n        _genomeChanges[tokenId]++;\\n        isNotVirgin[tokenId] = true;\\n        emit TokenMorphed(\\n            tokenId,\\n            oldGene,\\n            _genes[tokenId],\\n            price,\\n            PolymorphEventType.MORPH\\n        );\\n    }\\n\\n    function replaceGene(\\n        uint256 genome,\\n        uint256 replacement,\\n        uint256 genePosition\\n    ) internal pure virtual returns (uint256 newGene) {\\n        require(genePosition < 38, \\\"Bad gene position\\\");\\n        uint256 mod = 0;\\n        if (genePosition > 0) {\\n            mod = genome.mod(10**(genePosition * 2)); // Each gene is 2 digits long\\n        }\\n        uint256 div = genome.div(10**((genePosition + 1) * 2)).mul(\\n            10**((genePosition + 1) * 2)\\n        );\\n        uint256 insert = replacement * (10**(genePosition * 2));\\n        newGene = div.add(insert).add(mod);\\n        return newGene;\\n    }\\n\\n    function randomizeGenome(uint256 tokenId)\\n        public\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n    {\\n        _beforeGenomeChange(tokenId);\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{\\n            value: randomizeGenomePrice\\n        }(\\\"\\\");\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(randomizeGenomePrice);\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        uint256 oldGene = _genes[tokenId];\\n        _genes[tokenId] = geneGenerator.random();\\n        _genomeChanges[tokenId] = 0;\\n        isNotVirgin[tokenId] = true;\\n        emit TokenMorphed(\\n            tokenId,\\n            oldGene,\\n            _genes[tokenId],\\n            randomizeGenomePrice,\\n            PolymorphEventType.MORPH\\n        );\\n    }\\n\\n    function whitelistBridgeAddress(address bridgeAddress, bool status)\\n        external\\n        override\\n        onlyDAO\\n    {\\n        whitelistTunnelAddresses[bridgeAddress] = status;\\n    }\\n\\n    function priceForGenomeChange(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 price)\\n    {\\n        uint256 pastChanges = _genomeChanges[tokenId];\\n\\n        return baseGenomeChangePrice.mul(1 << pastChanges);\\n    }\\n\\n    function genomeChanges(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256 genomeChnages)\\n    {\\n        return _genomeChanges[tokenId];\\n    }\\n\\n    function _beforeGenomeChange(uint256 tokenId) internal view {\\n        require(\\n            !address(_msgSender()).isContract(),\\n            \\\"Caller cannot be a contract\\\"\\n        );\\n        require(\\n            _msgSender() == tx.origin,\\n            \\\"Msg sender should be original caller\\\"\\n        );\\n\\n        beforeTransfer(tokenId, _msgSender());\\n    }\\n\\n    function beforeTransfer(uint256 tokenId, address owner) internal view {\\n        require(\\n            ownerOf(tokenId) == owner,\\n            \\\"PolymorphWithGeneChanger: cannot change genome of token that is not own\\\"\\n        );\\n    }\\n\\n    function wormholeUpdateGene(\\n        uint256 tokenId,\\n        uint256 gene,\\n        bool isVirgin,\\n        uint256 genomeChangesCount\\n    ) external nonReentrant onlyTunnel {\\n        uint256 oldGene = _genes[tokenId];\\n        _genes[tokenId] = gene;\\n        isNotVirgin[tokenId] = isVirgin;\\n        _genomeChanges[tokenId] = genomeChangesCount;\\n\\n        emit TokenMorphed(\\n            tokenId,\\n            oldGene,\\n            _genes[tokenId],\\n            priceForGenomeChange(tokenId),\\n            PolymorphEventType.MORPH\\n        );\\n    }\\n}\\n\"}}}","address":"0xD43e3ecCe4430dE35bb01461dB8474CBf3CCd917","bytecode":"","deployedBytecode":"0x6080604052600436106103bc5760003560e01c80636c0360eb116101f2578063b88d4fde1161010d578063d5a83d3e116100a0578063e985e9c51161006f578063e985e9c514610b24578063ec9c074c14610b44578063f528a62714610b5a578063f84ddf0b14610b6f57600080fd5b8063d5a83d3e14610aa7578063d5abeb0114610aba578063e589233114610ad0578063e63ab1e914610af057600080fd5b8063ce14617d116100dc578063ce14617d14610a1d578063d45351e514610a33578063d539139314610a53578063d547741f14610a8757600080fd5b8063b88d4fde1461098d578063c87b56dd146109ad578063ca15c873146109cd578063cccb6d0d146109ed57600080fd5b806391d1485411610185578063a217fddf11610154578063a217fddf14610922578063a22cb46514610937578063a49bccca14610957578063ab39a3c81461096d57600080fd5b806391d14854146108ba57806395d89b41146108da57806398c5c078146108ef5780639e7bb4671461090f57600080fd5b806370b5aecb116101c157806370b5aecb14610845578063784996a0146108655780638456cb59146108855780639010d07c1461089a57600080fd5b80636c0360eb146107da5780636f8b44b0146107ef578063704ec0361461080f57806370a082311461082557600080fd5b80632f745c59116102e257806356a5c926116102755780636352211e116102445780636352211e1461074d5780636a1c03dc1461076d5780636a5be6861461078d5780636a627842146107ba57600080fd5b806356a5c926146106e257806356b1b300146106f55780635c975abb146107155780635e468dfd1461072d57600080fd5b806342966c68116102b157806342966c68146106525780634df77416146106725780634f6ccce7146106a257806355f804b3146106c257600080fd5b80632f745c59146105dd57806336568abe146105fd5780633f4ba83a1461061d57806342842e0e1461063257600080fd5b806318160ddd1161035a578063248a9ca311610329578063248a9ca31461054d57806325b081ff1461057d578063289ea0a91461059d5780632f2ff15d146105bd57600080fd5b806318160ddd146104cb5780632131c68c146104e057806323b872dd1461050057806323c8d07a1461052057600080fd5b8063081812fc11610396578063081812fc14610447578063095ea7b31461047f5780630a727edf1461049f5780631249c58b146104c357600080fd5b8063017f1e34146103d057806301ffc9a7146103f057806306fdde031461042557600080fd5b366103cb576103c9610b84565b005b600080fd5b3480156103dc57600080fd5b506103c96103eb366004613d83565b610dd1565b3480156103fc57600080fd5b5061041061040b366004613db2565b610e37565b60405190151581526020015b60405180910390f35b34801561043157600080fd5b5061043a610e48565b60405161041c9190613e27565b34801561045357600080fd5b50610467610462366004613d83565b610eda565b6040516001600160a01b03909116815260200161041c565b34801561048b57600080fd5b506103c961049a366004613e4f565b610f6f565b3480156104ab57600080fd5b506104b5601f5481565b60405190815260200161041c565b6103c9610b84565b3480156104d757600080fd5b50600c546104b5565b3480156104ec57600080fd5b50601254610467906001600160a01b031681565b34801561050c57600080fd5b506103c961051b366004613e7b565b611085565b34801561052c57600080fd5b506104b561053b366004613d83565b60009081526017602052604090205490565b34801561055957600080fd5b506104b5610568366004613d83565b60009081526020819052604090206001015490565b34801561058957600080fd5b50601e54610467906001600160a01b031681565b3480156105a957600080fd5b506103c96105b8366004613d83565b6110b7565b3480156105c957600080fd5b506103c96105d8366004613ebc565b611116565b3480156105e957600080fd5b506104b56105f8366004613e4f565b61113c565b34801561060957600080fd5b506103c9610618366004613ebc565b6111d2565b34801561062957600080fd5b506103c9611250565b34801561063e57600080fd5b506103c961064d366004613e7b565b6112f8565b34801561065e57600080fd5b506103c961066d366004613d83565b611313565b34801561067e57600080fd5b5061041061068d366004613d83565b60186020526000908152604090205460ff1681565b3480156106ae57600080fd5b506104b56106bd366004613d83565b61138d565b3480156106ce57600080fd5b506103c96106dd366004613f78565b611420565b6103c96106f0366004613fc1565b611482565b34801561070157600080fd5b506103c9610710366004613f78565b6116c2565b34801561072157600080fd5b50600e5460ff16610410565b34801561073957600080fd5b506103c9610748366004613d83565b61172f565b34801561075957600080fd5b50610467610768366004613d83565b61178e565b34801561077957600080fd5b506103c9610788366004613ff8565b611805565b34801561079957600080fd5b506104b56107a8366004613d83565b60009081526014602052604090205490565b3480156107c657600080fd5b506103c96107d5366004614035565b611908565b3480156107e657600080fd5b5061043a611950565b3480156107fb57600080fd5b506103c961080a366004613d83565b61195f565b34801561081b57600080fd5b506104b5601b5481565b34801561083157600080fd5b506104b5610840366004614035565b6119be565b34801561085157600080fd5b506103c9610860366004613e4f565b611a45565b34801561087157600080fd5b506103c9610880366004613d83565b611b80565b34801561089157600080fd5b506103c9611e1c565b3480156108a657600080fd5b506104676108b5366004613fc1565b611ec0565b3480156108c657600080fd5b506104106108d5366004613ebc565b611edf565b3480156108e657600080fd5b5061043a611f08565b3480156108fb57600080fd5b506103c961090a366004613d83565b611f17565b6103c961091d366004613d83565b611f76565b34801561092e57600080fd5b506104b5600081565b34801561094357600080fd5b506103c9610952366004614052565b61212f565b34801561096357600080fd5b506104b5601d5481565b34801561097957600080fd5b506103c9610988366004614052565b61213a565b34801561099957600080fd5b506103c96109a8366004614087565b61218f565b3480156109b957600080fd5b5061043a6109c8366004613d83565b6121c7565b3480156109d957600080fd5b506104b56109e8366004613d83565b6122a1565b3480156109f957600080fd5b50610410610a08366004614035565b60166020526000908152604090205460ff1681565b348015610a2957600080fd5b506104b560195481565b348015610a3f57600080fd5b506104b5610a4e366004613d83565b6122b8565b348015610a5f57600080fd5b506104b57f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610a9357600080fd5b506103c9610aa2366004613ebc565b6122d7565b6103c9610ab5366004613d83565b6122fd565b348015610ac657600080fd5b506104b5601c5481565b348015610adc57600080fd5b50610467610aeb366004613d83565b6125e6565b348015610afc57600080fd5b506104b57f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610b3057600080fd5b50610410610b3f366004614107565b612685565b348015610b5057600080fd5b506104b5601a5481565b348015610b6657600080fd5b5061043a6126b3565b348015610b7b57600080fd5b506104b5612741565b60026011541415610bb05760405162461bcd60e51b8152600401610ba790614135565b60405180910390fd5b6002601155601c54600f5410610bff5760405162461bcd60e51b8152602060048201526014602482015273151bdd185b081cdd5c1c1b1e481c995858da195960621b6044820152606401610ba7565b610c0d600f80546001019055565b6000610c18600f5490565b9050610c24601361274c565b60008281526014602052604080822092909255601254601b54925191926001600160a01b03909116918381818185875af1925050503d8060008114610c85576040519150601f19603f3d011682016040523d82523d6000602084013e610c8a565b606091505b5050905080610cab5760405162461bcd60e51b8152600401610ba79061416c565b6000610cc2601b54346129df90919063ffffffff16565b90508015610d3457604051600090339083908381818185875af1925050503d8060008114610d0c576040519150601f19603f3d011682016040523d82523d6000602084013e610d11565b606091505b5050905080610d325760405162461bcd60e51b8152600401610ba7906141c9565b505b610d3e33846129eb565b827f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da6014600086815260200190815260200160002054604051610d8391815260200190565b60405180910390a260008381526014602052604080822054601b549151869360008051602061468783398151915293610dbf9391928390614222565b60405180910390a25050600160115550565b6012546001600160a01b03163314610dfb5760405162461bcd60e51b8152600401610ba79061424d565b601b8190556040518181527f6a08b3bba14e54ee218389c7c7444e619f3897465dc06757938cfd01a6957f6c906020015b60405180910390a150565b6000610e4282612b39565b92915050565b606060028054610e5790614284565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8390614284565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b0316610f535760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ba7565b506000908152600660205260409020546001600160a01b031690565b6000610f7a8261178e565b9050806001600160a01b0316836001600160a01b03161415610fe85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ba7565b336001600160a01b038216148061100457506110048133612685565b6110765760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ba7565b6110808383612b5e565b505050565b611090335b82612bcc565b6110ac5760405162461bcd60e51b8152600401610ba7906142bf565b611080838383612ca3565b6012546001600160a01b031633146110e15760405162461bcd60e51b8152600401610ba79061424d565b60198190556040518181527fb1d78271daba9a366098d40b64d642a1399cabaa22c5234bacc87e92cef82ae690602001610e2c565b6000828152602081905260409020600101546111328133612e4a565b6110808383612eae565b6000611147836119be565b82106111a95760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610ba7565b506001600160a01b03919091166000908152600a60209081526040808320938352929052205490565b6001600160a01b03811633146112425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610ba7565b61124c8282612ed0565b5050565b61127a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611edf565b6112ee576040805162461bcd60e51b81526020600482015260248101919091527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20756e70617573656064820152608401610ba7565b6112f6612ef2565b565b6110808383836040518060200160405280600081525061218f565b61131c3361108a565b6113815760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610ba7565b61138a81612f85565b50565b6000611398600c5490565b82106113fb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ba7565b600c828154811061140e5761140e614310565b90600052602060002001549050919050565b6012546001600160a01b0316331461144a5760405162461bcd60e51b8152600401610ba79061424d565b6114538161302c565b7f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf681604051610e2c9190613e27565b600260115414156114a55760405162461bcd60e51b8152600401610ba790614135565b6002601155806114f75760405162461bcd60e51b815260206004820152601c60248201527f4261736520636861726163746572206e6f74206d6f72706861626c65000000006044820152606401610ba7565b6115008261303f565b600061150b836122b8565b6012546040519192506000916001600160a01b039091169083908381818185875af1925050503d806000811461155d576040519150601f19603f3d011682016040523d82523d6000602084013e611562565b606091505b50509050806115835760405162461bcd60e51b8152600401610ba79061416c565b600061158f34846129df565b9050801561160157604051600090339083908381818185875af1925050503d80600081146115d9576040519150601f19603f3d011682016040523d82523d6000602084013e6115de565b606091505b50509050806115ff5760405162461bcd60e51b8152600401610ba7906141c9565b505b60008581526014602052604081205490606461161d601361274c565b611627919061433c565b90506116348282886130f3565b6000888152601460209081526040808320939093556017905290812080549161165c83614366565b90915550506000878152601860209081526040808320805460ff191660019081179091556014909252918290205491518992600080516020614687833981519152926116ac928792918b91614222565b60405180910390a2505060016011555050505050565b6012546001600160a01b031633146116ec5760405162461bcd60e51b8152600401610ba79061424d565b80516116ff906015906020840190613cea565b507f4a826ca029d05af64e411551e15f7ee1e70af0b9bc43a31154ace86a863397b481604051610e2c9190613e27565b6012546001600160a01b031633146117595760405162461bcd60e51b8152600401610ba79061424d565b601d8190556040518181527fa0e0113404674c6f545b966e8ec54db3066a6c720a0054f0bc4b0c900cfff24390602001610e2c565b6000818152600460205260408120546001600160a01b031680610e425760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610ba7565b600260115414156118285760405162461bcd60e51b8152600401610ba790614135565b60026011553360009081526016602052604090205460ff1661188c5760405162461bcd60e51b815260206004820152601a60248201527f4e6f742063616c6c65642066726f6d207468652074756e6e656c0000000000006044820152606401610ba7565b6000848152601460208181526040808420805488825560188452828620805460ff19168915151790556017845291909420859055919052905485906000805160206146878339815191529083906118e2846122b8565b60016040516118f49493929190614222565b60405180910390a250506001601155505050565b60405162461bcd60e51b815260206004820152601760248201527f53686f756c64206e6f74207573652074686973206f6e650000000000000000006044820152606401610ba7565b606061195a6131fa565b905090565b6012546001600160a01b031633146119895760405162461bcd60e51b8152600401610ba79061424d565b601c8190556040518181527f28a10a2e0b5582da7164754cb994f6214b8af6aa7f7e003305fbc09e7106c51390602001610e2c565b60006001600160a01b038216611a295760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610ba7565b506001600160a01b031660009081526005602052604090205490565b6040516331a9108f60e11b8152600481018290526000903090636352211e9060240160206040518083038186803b158015611a7f57600080fd5b505afa158015611a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab79190614381565b9050336001600160a01b0382161480611ae95750611ad482610eda565b6001600160a01b0316336001600160a01b0316145b80611af95750611af98133612685565b611b755760405162461bcd60e51b815260206004820152604160248201527f455243373231436f6e73756d61626c653a206368616e6765436f6e73756d657260448201527f2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656064820152601960fa1b608482015260a401610ba7565b611080818484613209565b60026011541415611ba35760405162461bcd60e51b8152600401610ba790614135565b6002601155601e546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b158015611bec57600080fd5b505afa158015611c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c249190614381565b6001600160a01b0316336001600160a01b031614611c4157600080fd5b601e5460405163352df34360e11b8152600481018390526000916001600160a01b031690636a5be6869060240160206040518083038186803b158015611c8657600080fd5b505afa158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbe919061439e565b601e54604051630852cd8d60e31b8152600481018590529192506001600160a01b0316906342966c6890602401600060405180830381600087803b158015611d0557600080fd5b505af1158015611d19573d6000803e3d6000fd5b5050601f54611d2c925090506001613265565b601f55601c54611d3d906001613265565b601c55611d4e600f80546001019055565b6000611d59600f5490565b60008181526014602052604090208390559050611d77335b826129eb565b807f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da6014600084815260200190815260200160002054604051611dbc91815260200190565b60405180910390a280837f5bc298e251bf2d0dbbd7881e135ad8526c53dab8acd7e9777aea2c809fdf47e06014600085815260200190815260200160002054604051611e0a91815260200190565b60405180910390a35050600160115550565b611e467f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611edf565b611eb85760405162461bcd60e51b815260206004820152603e60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20706175736500006064820152608401610ba7565b6112f6613271565b6000828152600160205260408120611ed890836132ec565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b606060038054610e5790614284565b6012546001600160a01b03163314611f415760405162461bcd60e51b8152600401610ba79061424d565b601a8190556040518181527fff4da8d01e7184cc8c9d6c57d64b336b1de6d676b6215408967bd071c8da7e3d90602001610e2c565b60026011541415611f995760405162461bcd60e51b8152600401610ba790614135565b6002601155611fa78161303f565b601254601a546040516000926001600160a01b031691908381818185875af1925050503d8060008114611ff6576040519150601f19603f3d011682016040523d82523d6000602084013e611ffb565b606091505b505090508061201c5760405162461bcd60e51b8152600401610ba79061416c565b6000612033601a54346129df90919063ffffffff16565b905080156120a557604051600090339083908381818185875af1925050503d806000811461207d576040519150601f19603f3d011682016040523d82523d6000602084013e612082565b606091505b50509050806120a35760405162461bcd60e51b8152600401610ba7906141c9565b505b6000838152601460205260409020546120be601361274c565b6000858152601460208181526040808420948555601782528084208490556018825292839020805460ff191660019081179091559190529154601a54915187936000805160206146878339815191529361211c938793909290614222565b60405180910390a2505060016011555050565b61124c3383836132f8565b6012546001600160a01b031633146121645760405162461bcd60e51b8152600401610ba79061424d565b6001600160a01b03919091166000908152601660205260409020805460ff1916911515919091179055565b6121993383612bcc565b6121b55760405162461bcd60e51b8152600401610ba7906142bf565b6121c1848484846133c7565b50505050565b6000818152600460205260409020546060906001600160a01b03166122465760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610ba7565b60006122506131fa565b905060008151116122705760405180602001604052806000815250611ed8565b8061227a846133fa565b60405160200161228b9291906143b7565b6040516020818303038152906040529392505050565b6000818152600160205260408120610e42906134f8565b600081815260176020526040812054601954611ed8906001831b613502565b6000828152602081905260409020600101546122f38133612e4a565b6110808383612ed0565b600260115414156123205760405162461bcd60e51b8152600401610ba790614135565b6002601155601d5481111561238a5760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f742062756c6b20627579206d6f7265207468616e20746865207072604482015269195cd95d081b1a5b5a5d60b21b6064820152608401610ba7565b601c546123a08261239a600f5490565b90613265565b11156123e55760405162461bcd60e51b8152602060048201526014602482015273151bdd185b081cdd5c1c1b1e481c995858da195960621b6044820152606401610ba7565b601254601b546000916001600160a01b0316906124029084613502565b604051600081818185875af1925050503d806000811461243e576040519150601f19603f3d011682016040523d82523d6000602084013e612443565b606091505b50509050806124645760405162461bcd60e51b8152600401610ba79061416c565b600061248561247e84601b5461350290919063ffffffff16565b34906129df565b905080156124f757604051600090339083908381818185875af1925050503d80600081146124cf576040519150601f19603f3d011682016040523d82523d6000602084013e6124d4565b606091505b50509050806124f55760405162461bcd60e51b8152600401610ba7906141c9565b505b60005b838110156125db57612510600f80546001019055565b600061251b600f5490565b9050612527601361274c565b60008281526014602052604090205561253f33611d71565b807f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da601460008481526020019081526020016000205460405161258491815260200190565b60405180910390a260008181526014602052604080822054601b5491518493600080516020614687833981519152936125c09391928390614222565b60405180910390a250806125d381614366565b9150506124fa565b505060016011555050565b6000818152600460205260408120546001600160a01b03166126695760405162461bcd60e51b815260206004820152603660248201527f455243373231436f6e73756d61626c653a20636f6e73756d6572207175657279604482015275103337b9103737b732bc34b9ba32b73a103a37b5b2b760511b6064820152608401610ba7565b506000908152600960205260409020546001600160a01b031690565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b601580546126c090614284565b80601f01602080910402602001604051908101604052809291908181526020018280546126ec90614284565b80156127395780601f1061270e57610100808354040283529160200191612739565b820191906000526020600020905b81548152906001019060200180831161271c57829003601f168201915b505050505081565b600061195a600f5490565b600033325a8454424380406127626064836143e6565b6040516bffffffffffffffffffffffff196060998a1b811660208301529790981b909616603488015260488701949094526068860192909252608885015260a884015260c88301524060e88201526101080160408051601f198184030181528282528051602091820120908301520160408051601f198184030181529190528051602090910120918290555090565b80546001019055565b5490565b6128088282611edf565b61124c576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561283e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611ed8836001600160a01b03841661350e565b6110808383835b6128a9838383612910565b600e5460ff16156110805760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610ba7565b61291b8383836129d3565b6001600160a01b0383166129765761297181600c80546000838152600d60205260408120829055600182018355919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70155565b612999565b816001600160a01b0316836001600160a01b03161461299957612999838261355d565b6001600160a01b0382166129b057611080816135fa565b826001600160a01b0316826001600160a01b0316146110805761108082826136a9565b61108083600083613209565b6000611ed882846143e6565b6001600160a01b038216612a415760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ba7565b6000818152600460205260409020546001600160a01b031615612aa65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ba7565b612ab2600083836136ed565b6001600160a01b0382166000908152600560205260408120805460019290612adb9084906143fd565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b0319821663780e9d6360e01b1480610e425750610e4282613739565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b938261178e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b0316612c455760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ba7565b6000612c508361178e565b9050806001600160a01b0316846001600160a01b03161480612c8b5750836001600160a01b0316612c8084610eda565b6001600160a01b0316145b80612c9b5750612c9b8185612685565b949350505050565b826001600160a01b0316612cb68261178e565b6001600160a01b031614612d1a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610ba7565b6001600160a01b038216612d7c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ba7565b612d878383836136ed565b612d92600082612b5e565b6001600160a01b0383166000908152600560205260408120805460019290612dbb9084906143e6565b90915550506001600160a01b0382166000908152600560205260408120805460019290612de99084906143fd565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612e548282611edf565b61124c57612e6c816001600160a01b0316601461375e565b612e7783602061375e565b604051602001612e88929190614415565b60408051601f198184030181529082905262461bcd60e51b8252610ba791600401613e27565b612eb882826127fe565b60008281526001602052604090206110809082612882565b612eda82826138fa565b6000828152600160205260409020611080908261395f565b600e5460ff16612f3b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ba7565b600e805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000612f908261178e565b9050612f9e816000846136ed565b612fa9600083612b5e565b6001600160a01b0381166000908152600560205260408120805460019290612fd29084906143e6565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b805161124c906010906020840190613cea565b333b1561308e5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c65722063616e6e6f74206265206120636f6e747261637400000000006044820152606401610ba7565b3332146130e95760405162461bcd60e51b8152602060048201526024808201527f4d73672073656e6465722073686f756c64206265206f726967696e616c206361604482015263363632b960e11b6064820152608401610ba7565b61138a8133613974565b6000602682106131395760405162461bcd60e51b81526020600482015260116024820152702130b21033b2b732903837b9b4ba34b7b760791b6044820152606401610ba7565b600082156131645761316161314f84600261448a565b61315a90600a61458d565b8690613a13565b90505b60006131bb6131748560016143fd565b61317f90600261448a565b61318a90600a61458d565b6131b56131988760016143fd565b6131a390600261448a565b6131ae90600a61458d565b8990613a1f565b90613502565b905060006131ca85600261448a565b6131d590600a61458d565b6131df908761448a565b90506131ef8361239a8484613265565b979650505050505050565b606060108054610e5790614284565b60008181526009602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917f42ef856c2602f37ce625d252830bed486c5c8e9a4de8aa36cc3d15f304eb662b91a4505050565b6000611ed882846143fd565b600e5460ff16156132b75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610ba7565b600e805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f683390565b6000611ed88383613a2b565b816001600160a01b0316836001600160a01b0316141561335a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ba7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6133d2848484612ca3565b6133de84848484613a55565b6121c15760405162461bcd60e51b8152600401610ba790614599565b60608161341e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613448578061343281614366565b91506134419050600a836145eb565b9150613422565b60008167ffffffffffffffff81111561346357613463613eec565b6040519080825280601f01601f19166020018201604052801561348d576020820181803683370190505b5090505b8415612c9b576134a26001836143e6565b91506134af600a8661433c565b6134ba9060306143fd565b60f81b8183815181106134cf576134cf614310565b60200101906001600160f81b031916908160001a9053506134f1600a866145eb565b9450613491565b6000610e42825490565b6000611ed8828461448a565b600081815260018301602052604081205461355557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e42565b506000610e42565b6000600161356a846119be565b61357491906143e6565b6000838152600b60205260409020549091508082146135c7576001600160a01b0384166000908152600a602090815260408083208584528252808320548484528184208190558352600b90915290208190555b506000918252600b602090815260408084208490556001600160a01b039094168352600a81528383209183525290812055565b600c5460009061360c906001906143e6565b6000838152600d6020526040812054600c805493945090928490811061363457613634614310565b9060005260206000200154905080600c838154811061365557613655614310565b6000918252602080832090910192909255828152600d9091526040808220849055858252812055600c80548061368d5761368d6145ff565b6001900381819060005260206000200160009055905550505050565b60006136b4836119be565b6001600160a01b039093166000908152600a602090815260408083208684528252808320859055938252600b9052919091209190915550565b6136f8838383612897565b60008181526014602052604080822054905183926000805160206146878339815191529261372c9290918291600290614222565b60405180910390a2505050565b60006001600160e01b03198216634a9e46fd60e11b1480610e425750610e4282613b62565b6060600061376d83600261448a565b6137789060026143fd565b67ffffffffffffffff81111561379057613790613eec565b6040519080825280601f01601f1916602001820160405280156137ba576020820181803683370190505b509050600360fc1b816000815181106137d5576137d5614310565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061380457613804614310565b60200101906001600160f81b031916908160001a905350600061382884600261448a565b6138339060016143fd565b90505b60018111156138ab576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061386757613867614310565b1a60f81b82828151811061387d5761387d614310565b60200101906001600160f81b031916908160001a90535060049490941c936138a481614615565b9050613836565b508315611ed85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ba7565b6139048282611edf565b1561124c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611ed8836001600160a01b038416613ba2565b806001600160a01b03166139878361178e565b6001600160a01b03161461124c5760405162461bcd60e51b815260206004820152604760248201527f506f6c796d6f7270685769746847656e654368616e6765723a2063616e6e6f7460448201527f206368616e67652067656e6f6d65206f6620746f6b656e2074686174206973206064820152663737ba1037bbb760c91b608482015260a401610ba7565b6000611ed8828461433c565b6000611ed882846145eb565b6000826000018281548110613a4257613a42614310565b9060005260206000200154905092915050565b60006001600160a01b0384163b15613b5757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613a9990339089908890889060040161462c565b602060405180830381600087803b158015613ab357600080fd5b505af1925050508015613ae3575060408051601f3d908101601f19168201909252613ae091810190614669565b60015b613b3d573d808015613b11576040519150601f19603f3d011682016040523d82523d6000602084013e613b16565b606091505b508051613b355760405162461bcd60e51b8152600401610ba790614599565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c9b565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480613b9357506001600160e01b03198216635b5e139f60e01b145b80610e425750610e4282613c95565b60008181526001830160205260408120548015613c8b576000613bc66001836143e6565b8554909150600090613bda906001906143e6565b9050818114613c3f576000866000018281548110613bfa57613bfa614310565b9060005260206000200154905080876000018481548110613c1d57613c1d614310565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613c5057613c506145ff565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e42565b6000915050610e42565b60006001600160e01b03198216635a05180f60e01b1480610e425750610e428260006001600160e01b03198216637965db0b60e01b1480610e4257506301ffc9a760e01b6001600160e01b0319831614610e42565b828054613cf690614284565b90600052602060002090601f016020900481019282613d185760008555613d5e565b82601f10613d3157805160ff1916838001178555613d5e565b82800160010185558215613d5e579182015b82811115613d5e578251825591602001919060010190613d43565b50613d6a929150613d6e565b5090565b5b80821115613d6a5760008155600101613d6f565b600060208284031215613d9557600080fd5b5035919050565b6001600160e01b03198116811461138a57600080fd5b600060208284031215613dc457600080fd5b8135611ed881613d9c565b60005b83811015613dea578181015183820152602001613dd2565b838111156121c15750506000910152565b60008151808452613e13816020860160208601613dcf565b601f01601f19169290920160200192915050565b602081526000611ed86020830184613dfb565b6001600160a01b038116811461138a57600080fd5b60008060408385031215613e6257600080fd5b8235613e6d81613e3a565b946020939093013593505050565b600080600060608486031215613e9057600080fd5b8335613e9b81613e3a565b92506020840135613eab81613e3a565b929592945050506040919091013590565b60008060408385031215613ecf57600080fd5b823591506020830135613ee181613e3a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613f1d57613f1d613eec565b604051601f8501601f19908116603f01168101908282118183101715613f4557613f45613eec565b81604052809350858152868686011115613f5e57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215613f8a57600080fd5b813567ffffffffffffffff811115613fa157600080fd5b8201601f81018413613fb257600080fd5b612c9b84823560208401613f02565b60008060408385031215613fd457600080fd5b50508035926020909101359150565b80358015158114613ff357600080fd5b919050565b6000806000806080858703121561400e57600080fd5b843593506020850135925061402560408601613fe3565b9396929550929360600135925050565b60006020828403121561404757600080fd5b8135611ed881613e3a565b6000806040838503121561406557600080fd5b823561407081613e3a565b915061407e60208401613fe3565b90509250929050565b6000806000806080858703121561409d57600080fd5b84356140a881613e3a565b935060208501356140b881613e3a565b925060408501359150606085013567ffffffffffffffff8111156140db57600080fd5b8501601f810187136140ec57600080fd5b6140fb87823560208401613f02565b91505092959194509250565b6000806040838503121561411a57600080fd5b823561412581613e3a565b91506020830135613ee181613e3a565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b60208082526018908201527f4661696c656420746f2072657475726e206578636573732e0000000000000000604082015260600190565b6003811061421e57634e487b7160e01b600052602160045260246000fd5b9052565b8481526020810184905260408101839052608081016142446060830184614200565b95945050505050565b60208082526017908201527f4e6f742063616c6c65642066726f6d207468652064616f000000000000000000604082015260600190565b600181811c9082168061429857607f821691505b602082108114156142b957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261434b5761434b614326565b500690565b634e487b7160e01b600052601160045260246000fd5b600060001982141561437a5761437a614350565b5060010190565b60006020828403121561439357600080fd5b8151611ed881613e3a565b6000602082840312156143b057600080fd5b5051919050565b600083516143c9818460208801613dcf565b8351908301906143dd818360208801613dcf565b01949350505050565b6000828210156143f8576143f8614350565b500390565b6000821982111561441057614410614350565b500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161444d816017850160208801613dcf565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161447e816028840160208801613dcf565b01602801949350505050565b60008160001904831182151516156144a4576144a4614350565b500290565b600181815b808511156144e45781600019048211156144ca576144ca614350565b808516156144d757918102915b93841c93908002906144ae565b509250929050565b6000826144fb57506001610e42565b8161450857506000610e42565b816001811461451e576002811461452857614544565b6001915050610e42565b60ff84111561453957614539614350565b50506001821b610e42565b5060208310610133831016604e8410600b8410161715614567575081810a610e42565b61457183836144a9565b806000190482111561458557614585614350565b029392505050565b6000611ed883836144ec565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826145fa576145fa614326565b500490565b634e487b7160e01b600052603160045260246000fd5b60008161462457614624614350565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061465f90830184613dfb565b9695505050505050565b60006020828403121561467b57600080fd5b8151611ed881613d9c56fe8c0bdd7bca83c4e0c810cbecf44bc544a9dc0b9f265664e31ce0ce85f07a052ba264697066735822122027a94e0f9d3bd7099408f3a95547854114fd88c78556ff8cf928fb59c61ba5ed64736f6c63430008090033","abi":[{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"baseURI","type":"string"},{"internalType":"address payable","name":"_daoAddress","type":"address"},{"internalType":"uint256","name":"premintedTokensCount","type":"uint256"},{"internalType":"uint256","name":"_baseGenomeChangePrice","type":"uint256"},{"internalType":"uint256","name":"_polymorphPrice","type":"uint256"},{"internalType":"uint256","name":"_maxSupply","type":"uint256"},{"internalType":"uint256","name":"_randomizeGenomePrice","type":"uint256"},{"internalType":"uint256","name":"_bulkBuyLimit","type":"uint256"},{"internalType":"string","name":"_arweaveAssetsJSON","type":"string"},{"internalType":"address","name":"_polymorphV1Address","type":"address"}],"internalType":"struct PolymorphRoot.Params","name":"params","type":"tuple"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"arweaveAssetsJSON","type":"string"}],"name":"ArweaveAssetsJSONChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newGenomeChange","type":"uint256"}],"name":"BaseGenomeChangePriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"baseURI","type":"string"}],"name":"BaseURIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newBulkBuyLimit","type":"uint256"}],"name":"BulkBuyLimitChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"consumer","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ConsumerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newMaxSupply","type":"uint256"}],"name":"MaxSupplyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newPolymorphPrice","type":"uint256"}],"name":"PolymorphPriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newRandomizeGenomePriceChange","type":"uint256"}],"name":"RandomizeGenomePriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"oldTokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"gene","type":"uint256"}],"name":"TokenBurnedAndMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newGene","type":"uint256"}],"name":"TokenMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldGene","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newGene","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"enum Polymorph.PolymorphEventType","name":"eventType","type":"uint8"}],"name":"TokenMorphed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"arweaveAssetsJSON","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseGenomeChangePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"bulkBuy","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"bulkBuyLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burnAndMintNewPolymorph","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newGenomeChangePrice","type":"uint256"}],"name":"changeBaseGenomeChangePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_consumer","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"changeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newRandomizeGenomePrice","type":"uint256"}],"name":"changeRandomizeGenomePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"consumerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daoAddress","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"geneOf","outputs":[{"internalType":"uint256","name":"gene","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"genomeChanges","outputs":[{"internalType":"uint256","name":"genomeChnages","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"isNotVirgin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"genePosition","type":"uint256"}],"name":"morphGene","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"polymorphPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"polymorphV1Contract","outputs":[{"internalType":"contract Polymorph","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"priceForGenomeChange","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"randomizeGenome","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"randomizeGenomePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_arweaveAssetsJSON","type":"string"}],"name":"setArweaveAssetsJSON","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_baseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bulkBuyLimit","type":"uint256"}],"name":"setBulkBuyLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxSupply","type":"uint256"}],"name":"setMaxSupply","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPolymorphPrice","type":"uint256"}],"name":"setPolymorphPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBurnedV1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bridgeAddress","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"whitelistBridgeAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistTunnelAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"gene","type":"uint256"},{"internalType":"bool","name":"isVirgin","type":"bool"},{"internalType":"uint256","name":"genomeChangesCount","type":"uint256"}],"name":"wormholeUpdateGene","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}