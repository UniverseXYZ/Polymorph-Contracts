{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/mainnet/PolymorphRoot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPolymorphRoot.sol\\\";\\nimport \\\"../base/Polymorph.sol\\\";\\nimport \\\"../base/PolymorphWithGeneChanger.sol\\\";\\n\\ncontract PolymorphRoot is PolymorphWithGeneChanger, IPolymorphRoot {\\n    using PolymorphGeneGenerator for PolymorphGeneGenerator.Gene;\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n\\n    struct Params {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        address payable _daoAddress;\\n        uint256 premintedTokensCount;\\n        uint256 _baseGenomeChangePrice;\\n        uint256 _polymorphPrice;\\n        uint256 _maxSupply;\\n        uint256 _randomizeGenomePrice;\\n        uint256 _bulkBuyLimit;\\n        string _arweaveAssetsJSON;\\n        address _polymorphV1Address;\\n    }\\n\\n    uint256 public polymorphPrice;\\n    uint256 public maxSupply;\\n    uint256 public bulkBuyLimit;\\n\\n    Polymorph public polymorphV1Contract;\\n    uint256 public totalBurnedV1;\\n\\n    event PolymorphPriceChanged(uint256 newPolymorphPrice);\\n    event MaxSupplyChanged(uint256 newMaxSupply);\\n    event BulkBuyLimitChanged(uint256 newBulkBuyLimit);\\n\\n    constructor(\\n        Params memory params\\n    )\\n        PolymorphWithGeneChanger(\\n            params.name,\\n            params.symbol,\\n            params.baseURI,\\n            params._daoAddress,\\n            params._baseGenomeChangePrice,\\n            params._randomizeGenomePrice,\\n            params._arweaveAssetsJSON\\n        )\\n    {\\n            polymorphPrice = params._polymorphPrice;\\n            maxSupply = params._maxSupply;\\n\\n            bulkBuyLimit = params._bulkBuyLimit;\\n\\n            arweaveAssetsJSON = params._arweaveAssetsJSON;\\n            polymorphV1Contract = Polymorph(params._polymorphV1Address);\\n            geneGenerator.random();\\n\\n            _preMint(params.premintedTokensCount);\\n    }\\n\\n    function _preMint(uint256 amountToMint) internal {\\n        for (uint256 i = 0; i < amountToMint; i++) {\\n            _tokenIdTracker.increment();\\n            uint256 tokenId = _tokenIdTracker.current();\\n            _genes[tokenId] = geneGenerator.random();\\n            _mint(_msgSender(), tokenId);\\n        }\\n    }\\n\\n    function mint() public payable override nonReentrant {\\n        require(_tokenIdTracker.current() < maxSupply, \\\"Total supply reached\\\");\\n\\n        _tokenIdTracker.increment();\\n\\n        uint256 tokenId = _tokenIdTracker.current();\\n        _genes[tokenId] = geneGenerator.random();\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{value: polymorphPrice}(\\n            \\\"\\\"\\n        );\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(polymorphPrice);\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        _mint(_msgSender(), tokenId);\\n\\n        emit TokenMinted(tokenId, _genes[tokenId]);\\n        emit TokenMorphed(\\n            tokenId,\\n            0,\\n            _genes[tokenId],\\n            polymorphPrice,\\n            PolymorphEventType.MINT\\n        );\\n    }\\n\\n    function burnAndMintNewPolymorph(uint256 tokenId) external nonReentrant {\\n        require(_msgSender() == polymorphV1Contract.ownerOf(tokenId));\\n\\n        uint256 geneToTransfer = polymorphV1Contract.geneOf(tokenId);\\n        polymorphV1Contract.burn(tokenId);\\n\\n        totalBurnedV1 = totalBurnedV1.add(1);\\n        maxSupply = maxSupply.add(1);\\n        _tokenIdTracker.increment();\\n\\n        uint256 newTokenId = _tokenIdTracker.current();\\n        _genes[newTokenId] = geneToTransfer;\\n\\n        _mint(_msgSender(), newTokenId);\\n\\n        emit TokenMinted(newTokenId, _genes[newTokenId]);\\n        emit TokenBurnedAndMinted(tokenId, newTokenId, _genes[newTokenId]);\\n    }\\n\\n    function bulkBuy(uint256 amount) public payable override nonReentrant {\\n        require(\\n            amount <= bulkBuyLimit,\\n            \\\"Cannot bulk buy more than the preset limit\\\"\\n        );\\n        require(\\n            _tokenIdTracker.current().add(amount) <= maxSupply,\\n            \\\"Total supply reached\\\"\\n        );\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{\\n            value: polymorphPrice.mul(amount)\\n        }(\\\"\\\");\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(polymorphPrice.mul(amount));\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            _tokenIdTracker.increment();\\n\\n            uint256 tokenId = _tokenIdTracker.current();\\n            _genes[tokenId] = geneGenerator.random();\\n            _mint(_msgSender(), tokenId);\\n\\n            emit TokenMinted(tokenId, _genes[tokenId]);\\n            emit TokenMorphed(\\n                tokenId,\\n                0,\\n                _genes[tokenId],\\n                polymorphPrice,\\n                PolymorphEventType.MINT\\n            );\\n        }\\n    }\\n\\n    function mint(address to)\\n        public\\n        pure\\n        override(ERC721PresetMinterPauserAutoId)\\n    {\\n        revert(\\\"Should not use this one\\\");\\n    }\\n\\n    function setPolymorphPrice(uint256 newPolymorphPrice)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        polymorphPrice = newPolymorphPrice;\\n\\n        emit PolymorphPriceChanged(newPolymorphPrice);\\n    }\\n\\n    function setMaxSupply(uint256 _maxSupply) public virtual override onlyDAO {\\n        maxSupply = _maxSupply;\\n\\n        emit MaxSupplyChanged(maxSupply);\\n    }\\n\\n    function setBulkBuyLimit(uint256 _bulkBuyLimit)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        bulkBuyLimit = _bulkBuyLimit;\\n\\n        emit BulkBuyLimitChanged(_bulkBuyLimit);\\n    }\\n\\n    receive() external payable {\\n        mint();\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"contracts/mainnet/IPolymorphRoot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPolymorphRoot is IERC721 {\\n    function mint() external payable;\\n\\n    function bulkBuy(uint256 amount) external payable;\\n\\n    function setPolymorphPrice(uint256 newPolymorphPrice) external;\\n\\n    function setMaxSupply(uint256 maxSupply) external;\\n\\n    function setBulkBuyLimit(uint256 bulkBuyLimit) external;\\n}\\n\"},\"contracts/base/IPolymorph.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPolymorph is IERC721 {\\n    function geneOf(uint256 tokenId) external view returns (uint256 gene);\\n\\n    function lastTokenId() external view returns (uint256 tokenId);\\n\\n    function setBaseURI(string memory _baseURI) external;\\n\\n    function setArweaveAssetsJSON(string memory _arweaveAssetsJSON) external;\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"},\"contracts/base/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is\\n    Context,\\n    AccessControlEnumerable,\\n    ERC721Enumerable,\\n    ERC721Burnable,\\n    ERC721Pausable\\n{\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter internal _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseTokenURI = baseURI_;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function baseURI() external view virtual  returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"},\"contracts/lib/PolymorphGeneGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary PolymorphGeneGenerator {\\n\\n    struct Gene {\\n\\t\\tuint256 lastRandom;\\n    }\\n\\n    function random(Gene storage g) internal returns (uint256) {\\n\\t\\tg.lastRandom = uint256(keccak256(abi.encode(keccak256(abi.encodePacked(msg.sender, tx.origin, gasleft(), g.lastRandom, block.timestamp, block.number, blockhash(block.number), blockhash(block.number-100))))));\\n\\t\\treturn g.lastRandom;\\n    }\\n\\n}\"},\"contracts/modifiers/DAOControlled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract DAOControlled {\\n    address payable public daoAddress;\\n\\n    constructor(address payable _daoAddress) {\\n        daoAddress = _daoAddress;\\n    }\\n\\n    modifier onlyDAO() {\\n        require(msg.sender == daoAddress, \\\"Not called from the dao\\\");\\n        _;\\n    }\\n}\\n\"},\"contracts/base/Polymorph.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport \\\"./IPolymorph.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../base/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"../lib/PolymorphGeneGenerator.sol\\\";\\nimport \\\"../modifiers/DAOControlled.sol\\\";\\n\\nabstract contract Polymorph is\\n    IPolymorph,\\n    ERC721PresetMinterPauserAutoId,\\n    ReentrancyGuard,\\n    DAOControlled\\n{\\n    using Counters for Counters.Counter;\\n    using PolymorphGeneGenerator for PolymorphGeneGenerator.Gene;\\n\\n    PolymorphGeneGenerator.Gene internal geneGenerator;\\n    mapping(uint256 => uint256) internal _genes;\\n    string public arweaveAssetsJSON;\\n\\n    event TokenMorphed(\\n        uint256 indexed tokenId,\\n        uint256 oldGene,\\n        uint256 newGene,\\n        uint256 price,\\n        PolymorphEventType eventType\\n    );\\n    event TokenMinted(uint256 indexed tokenId, uint256 newGene);\\n    event TokenBurnedAndMinted(\\n        uint256 indexed oldTokenId,\\n        uint256 indexed newTokenId,\\n        uint256 gene\\n    );\\n    event BaseURIChanged(string baseURI);\\n    event ArweaveAssetsJSONChanged(string arweaveAssetsJSON);\\n\\n    enum PolymorphEventType {\\n        MINT,\\n        MORPH,\\n        TRANSFER\\n    }\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        address payable _daoAddress,\\n        string memory _arweaveAssetsJSON\\n    )\\n        DAOControlled(_daoAddress)\\n        ERC721PresetMinterPauserAutoId(name, symbol, baseURI)\\n    {\\n        arweaveAssetsJSON = _arweaveAssetsJSON;\\n    }\\n\\n    function geneOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 gene)\\n    {\\n        return _genes[tokenId];\\n    }\\n\\n    function lastTokenId() public view override returns (uint256 tokenId) {\\n        return _tokenIdTracker.current();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721PresetMinterPauserAutoId) {\\n        ERC721PresetMinterPauserAutoId._beforeTokenTransfer(from, to, tokenId);\\n        emit TokenMorphed(\\n            tokenId,\\n            _genes[tokenId],\\n            _genes[tokenId],\\n            0,\\n            PolymorphEventType.TRANSFER\\n        );\\n    }\\n\\n    function setBaseURI(string memory _baseURI)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        _setBaseURI(_baseURI);\\n\\n        emit BaseURIChanged(_baseURI);\\n    }\\n\\n    function setArweaveAssetsJSON(string memory _arweaveAssetsJSON)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        arweaveAssetsJSON = _arweaveAssetsJSON;\\n\\n        emit ArweaveAssetsJSONChanged(_arweaveAssetsJSON);\\n    }\\n}\\n\"},\"contracts/modifiers/TunnelEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract TunnelEnabled {\\n    mapping(address => bool) public whitelistTunnelAddresses;\\n\\n    modifier onlyTunnel() {\\n        require(\\n            whitelistTunnelAddresses[msg.sender],\\n            \\\"Not called from the tunnel\\\"\\n        );\\n        _;\\n    }\\n}\\n\"},\"contracts/base/IPolymorphWithGeneChanger.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPolymorphWithGeneChanger {\\n    function morphGene(uint256 tokenId, uint256 genePosition) external payable;\\n\\n    function randomizeGenome(uint256 tokenId) external payable;\\n\\n    function priceForGenomeChange(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 price);\\n\\n    function changeBaseGenomeChangePrice(uint256 newGenomeChangePrice) external;\\n\\n    function changeRandomizeGenomePrice(uint256 newRandomizeGenomePrice)\\n        external;\\n\\n    function whitelistBridgeAddress(address bridgeAddress, bool status)\\n        external;\\n\\n    function genomeChanges(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 genomeChnages);\\n}\\n\"},\"contracts/base/PolymorphWithGeneChanger.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../lib/PolymorphGeneGenerator.sol\\\";\\nimport \\\"../modifiers/TunnelEnabled.sol\\\";\\nimport \\\"./Polymorph.sol\\\";\\nimport \\\"./IPolymorphWithGeneChanger.sol\\\";\\n\\nabstract contract PolymorphWithGeneChanger is\\n    IPolymorphWithGeneChanger,\\n    Polymorph,\\n    TunnelEnabled\\n{\\n    using PolymorphGeneGenerator for PolymorphGeneGenerator.Gene;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(uint256 => uint256) internal _genomeChanges;\\n    mapping(uint256 => bool) public isNotVirgin;\\n    uint256 public baseGenomeChangePrice;\\n    uint256 public randomizeGenomePrice;\\n\\n    event BaseGenomeChangePriceChanged(uint256 newGenomeChange);\\n    event RandomizeGenomePriceChanged(uint256 newRandomizeGenomePriceChange);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        address payable _daoAddress,\\n        uint256 _baseGenomeChangePrice,\\n        uint256 _randomizeGenomePrice,\\n        string memory _arweaveAssetsJSON\\n    ) Polymorph(name, symbol, baseURI, _daoAddress, _arweaveAssetsJSON) {\\n        baseGenomeChangePrice = _baseGenomeChangePrice;\\n        randomizeGenomePrice = _randomizeGenomePrice;\\n    }\\n\\n    function changeBaseGenomeChangePrice(uint256 newGenomeChangePrice)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        baseGenomeChangePrice = newGenomeChangePrice;\\n        emit BaseGenomeChangePriceChanged(newGenomeChangePrice);\\n    }\\n\\n    function changeRandomizeGenomePrice(uint256 newRandomizeGenomePrice)\\n        public\\n        virtual\\n        override\\n        onlyDAO\\n    {\\n        randomizeGenomePrice = newRandomizeGenomePrice;\\n        emit RandomizeGenomePriceChanged(newRandomizeGenomePrice);\\n    }\\n\\n    function morphGene(uint256 tokenId, uint256 genePosition)\\n        public\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n    {\\n        require(genePosition > 0, \\\"Base character not morphable\\\");\\n        _beforeGenomeChange(tokenId);\\n        uint256 price = priceForGenomeChange(tokenId);\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{value: price}(\\\"\\\");\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(price);\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        uint256 oldGene = _genes[tokenId];\\n        uint256 newTrait = geneGenerator.random() % 100;\\n        _genes[tokenId] = replaceGene(oldGene, newTrait, genePosition);\\n        _genomeChanges[tokenId]++;\\n        isNotVirgin[tokenId] = true;\\n        emit TokenMorphed(\\n            tokenId,\\n            oldGene,\\n            _genes[tokenId],\\n            price,\\n            PolymorphEventType.MORPH\\n        );\\n    }\\n\\n    function replaceGene(\\n        uint256 genome,\\n        uint256 replacement,\\n        uint256 genePosition\\n    ) internal pure virtual returns (uint256 newGene) {\\n        require(genePosition < 38, \\\"Bad gene position\\\");\\n        uint256 mod = 0;\\n        if (genePosition > 0) {\\n            mod = genome.mod(10**(genePosition * 2)); // Each gene is 2 digits long\\n        }\\n        uint256 div = genome.div(10**((genePosition + 1) * 2)).mul(\\n            10**((genePosition + 1) * 2)\\n        );\\n        uint256 insert = replacement * (10**(genePosition * 2));\\n        newGene = div.add(insert).add(mod);\\n        return newGene;\\n    }\\n\\n    function randomizeGenome(uint256 tokenId)\\n        public\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n    {\\n        _beforeGenomeChange(tokenId);\\n\\n        (bool transferToDaoStatus, ) = daoAddress.call{\\n            value: randomizeGenomePrice\\n        }(\\\"\\\");\\n        require(\\n            transferToDaoStatus,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n\\n        uint256 excessAmount = msg.value.sub(randomizeGenomePrice);\\n        if (excessAmount > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{\\n                value: excessAmount\\n            }(\\\"\\\");\\n            require(returnExcessStatus, \\\"Failed to return excess.\\\");\\n        }\\n\\n        uint256 oldGene = _genes[tokenId];\\n        _genes[tokenId] = geneGenerator.random();\\n        _genomeChanges[tokenId] = 0;\\n        isNotVirgin[tokenId] = true;\\n        emit TokenMorphed(\\n            tokenId,\\n            oldGene,\\n            _genes[tokenId],\\n            randomizeGenomePrice,\\n            PolymorphEventType.MORPH\\n        );\\n    }\\n\\n    function whitelistBridgeAddress(address bridgeAddress, bool status)\\n        external\\n        override\\n        onlyDAO\\n    {\\n        whitelistTunnelAddresses[bridgeAddress] = status;\\n    }\\n\\n    function priceForGenomeChange(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 price)\\n    {\\n        uint256 pastChanges = _genomeChanges[tokenId];\\n\\n        return baseGenomeChangePrice.mul(1 << pastChanges);\\n    }\\n\\n    function genomeChanges(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256 genomeChnages)\\n    {\\n        return _genomeChanges[tokenId];\\n    }\\n\\n    function _beforeGenomeChange(uint256 tokenId) internal view {\\n        require(\\n            !address(_msgSender()).isContract(),\\n            \\\"Caller cannot be a contract\\\"\\n        );\\n        require(\\n            _msgSender() == tx.origin,\\n            \\\"Msg sender should be original caller\\\"\\n        );\\n\\n        beforeTransfer(tokenId, _msgSender());\\n    }\\n\\n    function beforeTransfer(uint256 tokenId, address owner) internal view {\\n        require(\\n            ownerOf(tokenId) == owner,\\n            \\\"PolymorphWithGeneChanger: cannot change genome of token that is not own\\\"\\n        );\\n    }\\n\\n    function wormholeUpdateGene(\\n        uint256 tokenId,\\n        uint256 gene,\\n        bool isVirgin,\\n        uint256 genomeChangesCount\\n    ) external nonReentrant onlyTunnel {\\n        uint256 oldGene = _genes[tokenId];\\n        _genes[tokenId] = gene;\\n        isNotVirgin[tokenId] = isVirgin;\\n        _genomeChanges[tokenId] = genomeChangesCount;\\n\\n        emit TokenMorphed(\\n            tokenId,\\n            oldGene,\\n            _genes[tokenId],\\n            priceForGenomeChange(tokenId),\\n            PolymorphEventType.MORPH\\n        );\\n    }\\n}\\n\"}}}","address":"0x515bC1357Ed5D6960120Ec1CE6b2911Cec377DE0","bytecode":"0x60806040523480156200001157600080fd5b506040516200530b3803806200530b833981016040819052620000349162000b8b565b80600001518160200151826040015183606001518460a00151856101000151866101400151868686868481858585828281600290805190602001906200007c92919062000a37565b5080516200009290600390602084019062000a37565b5050600c805460ff19169055508051620000b490600e90602084019062000a37565b50620000c2600033620001fc565b620000ee7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620001fc565b6200011a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620001fc565b50506001600f5550601080546001600160a01b0319166001600160a01b039290921691909117905580516200015790601390602084019062000a37565b50505060179590955550505060185550505060c0830151601955505060e0810151601a55610120810151601b556101408101518051620001a09160139160209091019062000a37565b50806101600151601c60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620001e460116200020c60201b620025251760201c565b506080810151620001f590620002ae565b5062000e39565b62000208828262000334565b5050565b600033325a8454424380406200022460648362000d98565b6040516001600160601b03196060998a1b811660208301529790981b909616603488015260488701949094526068860192909252608885015260a884015260c88301524060e88201526101080160408051601f198184030181528282528051602091820120908301520160408051601f198184030181529190528051602090910120918290555090565b60005b818110156200020857620002d1600d6200037760201b620025ca1760201c565b6000620002ea600d6200038060201b620025d31760201c565b90506200030360116200020c60201b620025251760201c565b6000828152601260205260409020556200031e338262000384565b50806200032b8162000def565b915050620002b1565b6200034b8282620004de60201b620025d71760201c565b6000828152600160209081526040909120620003729183906200265b6200057e821b17901c565b505050565b80546001019055565b5490565b6001600160a01b038216620003e05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600460205260409020546001600160a01b031615620004475760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401620003d7565b62000455600083836200059e565b6001600160a01b03821660009081526005602052604081208054600192906200048090849062000d7d565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000208576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200053a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000595836001600160a01b0384166200060b565b90505b92915050565b620005b68383836200065d60201b620026701760201c565b60008181526012602052604080822054905183927f8c0bdd7bca83c4e0c810cbecf44bc544a9dc0b9f265664e31ce0ce85f07a052b92620005fe929091829160029062000cdb565b60405180910390a2505050565b6000818152600183016020526040812054620006545750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000598565b50600062000598565b620003728383836200067560201b620026771760201c565b6200068d838383620006f660201b620026e91760201c565b600c5460ff1615620003725760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401620003d7565b6200070e8383836200037260201b620010531760201c565b6001600160a01b0383166200076c576200076681600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b62000792565b816001600160a01b0316836001600160a01b0316146200079257620007928382620007d2565b6001600160a01b038216620007ac5762000372816200087f565b826001600160a01b0316826001600160a01b03161462000372576200037282826200095d565b60006001620007ec84620009ae60201b6200199f1760201c565b620007f8919062000d98565b6000838152600960205260409020549091508082146200084c576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090620008939060019062000d98565b6000838152600b6020526040812054600a8054939450909284908110620008ca57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a8381548110620008fa57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806200094157634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006200097583620009ae60201b6200199f1760201c565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b60006001600160a01b03821662000a1b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401620003d7565b506001600160a01b031660009081526005602052604090205490565b82805462000a459062000db2565b90600052602060002090601f01602090048101928262000a69576000855562000ab4565b82601f1062000a8457805160ff191683800117855562000ab4565b8280016001018555821562000ab4579182015b8281111562000ab457825182559160200191906001019062000a97565b5062000ac292915062000ac6565b5090565b5b8082111562000ac2576000815560010162000ac7565b80516001600160a01b038116811462000af557600080fd5b919050565b600082601f83011262000b0b578081fd5b81516001600160401b0381111562000b275762000b2762000e23565b602062000b3d601f8301601f1916820162000d4a565b828152858284870101111562000b51578384fd5b835b8381101562000b7057858101830151828201840152820162000b53565b8381111562000b8157848385840101525b5095945050505050565b60006020828403121562000b9d578081fd5b81516001600160401b038082111562000bb4578283fd5b90830190610180828603121562000bc9578283fd5b62000bd362000d1e565b82518281111562000be2578485fd5b62000bf08782860162000afa565b82525060208301518281111562000c05578485fd5b62000c138782860162000afa565b60208301525060408301518281111562000c2b578485fd5b62000c398782860162000afa565b60408301525062000c4d6060840162000add565b60608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518381111562000ca6578586fd5b62000cb48882870162000afa565b828401525050610160915062000ccc82840162000add565b91810191909152949350505050565b8481526020810184905260408101839052608081016003831062000d0f57634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b60405161018081016001600160401b038111828210171562000d445762000d4462000e23565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000d755762000d7562000e23565b604052919050565b6000821982111562000d935762000d9362000e0d565b500190565b60008282101562000dad5762000dad62000e0d565b500390565b600181811c9082168062000dc757607f821691505b6020821081141562000de957634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000e065762000e0662000e0d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6144c28062000e496000396000f3fe6080604052600436106103a65760003560e01c80636a627842116101e7578063ab39a3c81161010d578063d547741f116100a0578063e985e9c51161006f578063e985e9c514610ace578063ec9c074c14610b17578063f528a62714610b2d578063f84ddf0b14610b4257600080fd5b8063d547741f14610a51578063d5a83d3e14610a71578063d5abeb0114610a84578063e63ab1e914610a9a57600080fd5b8063cccb6d0d116100dc578063cccb6d0d146109b7578063ce14617d146109e7578063d45351e5146109fd578063d539139314610a1d57600080fd5b8063ab39a3c814610937578063b88d4fde14610957578063c87b56dd14610977578063ca15c8731461099757600080fd5b80639010d07c116101855780639e7bb467116101545780639e7bb467146108d9578063a217fddf146108ec578063a22cb46514610901578063a49bccca1461092157600080fd5b80639010d07c1461086457806391d148541461088457806395d89b41146108a457806398c5c078146108b957600080fd5b8063704ec036116101c1578063704ec036146107f957806370a082311461080f578063784996a01461082f5780638456cb591461084f57600080fd5b80636a627842146107a45780636c0360eb146107c45780636f8b44b0146107d957600080fd5b80632f745c59116102cc57806355f804b31161026a5780635e468dfd116102395780635e468dfd146107175780636352211e146107375780636a1c03dc146107575780636a5be6861461077757600080fd5b806355f804b3146106ac57806356a5c926146106cc57806356b1b300146106df5780635c975abb146106ff57600080fd5b806342842e0e116102a657806342842e0e1461061c57806342966c681461063c5780634df774161461065c5780634f6ccce71461068c57600080fd5b80632f745c59146105c757806336568abe146105e75780633f4ba83a1461060757600080fd5b806318160ddd11610344578063248a9ca311610313578063248a9ca31461053757806325b081ff14610567578063289ea0a9146105875780632f2ff15d146105a757600080fd5b806318160ddd146104b55780632131c68c146104ca57806323b872dd146104ea57806323c8d07a1461050a57600080fd5b8063081812fc11610380578063081812fc14610431578063095ea7b3146104695780630a727edf146104895780631249c58b146104ad57600080fd5b8063017f1e34146103ba57806301ffc9a7146103da57806306fdde031461040f57600080fd5b366103b5576103b3610b57565b005b600080fd5b3480156103c657600080fd5b506103b36103d5366004613dc4565b610da4565b3480156103e657600080fd5b506103fa6103f5366004613e21565b610e0a565b60405190151581526020015b60405180910390f35b34801561041b57600080fd5b50610424610e1b565b604051610406919061404d565b34801561043d57600080fd5b5061045161044c366004613dc4565b610ead565b6040516001600160a01b039091168152602001610406565b34801561047557600080fd5b506103b3610484366004613d99565b610f42565b34801561049557600080fd5b5061049f601d5481565b604051908152602001610406565b6103b3610b57565b3480156104c157600080fd5b50600a5461049f565b3480156104d657600080fd5b50601054610451906001600160a01b031681565b3480156104f657600080fd5b506103b3610505366004613ca8565b611058565b34801561051657600080fd5b5061049f610525366004613dc4565b60009081526015602052604090205490565b34801561054357600080fd5b5061049f610552366004613dc4565b60009081526020819052604090206001015490565b34801561057357600080fd5b50601c54610451906001600160a01b031681565b34801561059357600080fd5b506103b36105a2366004613dc4565b61108a565b3480156105b357600080fd5b506103b36105c2366004613ddc565b6110e9565b3480156105d357600080fd5b5061049f6105e2366004613d99565b61110f565b3480156105f357600080fd5b506103b3610602366004613ddc565b6111a5565b34801561061357600080fd5b506103b3611223565b34801561062857600080fd5b506103b3610637366004613ca8565b6112cb565b34801561064857600080fd5b506103b3610657366004613dc4565b6112e6565b34801561066857600080fd5b506103fa610677366004613dc4565b60166020526000908152604090205460ff1681565b34801561069857600080fd5b5061049f6106a7366004613dc4565b611360565b3480156106b857600080fd5b506103b36106c7366004613e59565b611401565b6103b36106da366004613e00565b611463565b3480156106eb57600080fd5b506103b36106fa366004613e59565b6116a3565b34801561070b57600080fd5b50600c5460ff166103fa565b34801561072357600080fd5b506103b3610732366004613dc4565b611710565b34801561074357600080fd5b50610451610752366004613dc4565b61176f565b34801561076357600080fd5b506103b3610772366004613eb7565b6117e6565b34801561078357600080fd5b5061049f610792366004613dc4565b60009081526012602052604090205490565b3480156107b057600080fd5b506103b36107bf366004613c38565b6118e9565b3480156107d057600080fd5b50610424611931565b3480156107e557600080fd5b506103b36107f4366004613dc4565b611940565b34801561080557600080fd5b5061049f60195481565b34801561081b57600080fd5b5061049f61082a366004613c38565b61199f565b34801561083b57600080fd5b506103b361084a366004613dc4565b611a26565b34801561085b57600080fd5b506103b3611cc2565b34801561087057600080fd5b5061045161087f366004613e00565b611d66565b34801561089057600080fd5b506103fa61089f366004613ddc565b611d85565b3480156108b057600080fd5b50610424611dae565b3480156108c557600080fd5b506103b36108d4366004613dc4565b611dbd565b6103b36108e7366004613dc4565b611e1c565b3480156108f857600080fd5b5061049f600081565b34801561090d57600080fd5b506103b361091c366004613d65565b611fd5565b34801561092d57600080fd5b5061049f601b5481565b34801561094357600080fd5b506103b3610952366004613d65565b611fe0565b34801561096357600080fd5b506103b3610972366004613ce8565b612035565b34801561098357600080fd5b50610424610992366004613dc4565b61206d565b3480156109a357600080fd5b5061049f6109b2366004613dc4565b612147565b3480156109c357600080fd5b506103fa6109d2366004613c38565b60146020526000908152604090205460ff1681565b3480156109f357600080fd5b5061049f60175481565b348015610a0957600080fd5b5061049f610a18366004613dc4565b61215e565b348015610a2957600080fd5b5061049f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610a5d57600080fd5b506103b3610a6c366004613ddc565b61217d565b6103b3610a7f366004613dc4565b6121a3565b348015610a9057600080fd5b5061049f601a5481565b348015610aa657600080fd5b5061049f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610ada57600080fd5b506103fa610ae9366004613c70565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610b2357600080fd5b5061049f60185481565b348015610b3957600080fd5b5061042461248c565b348015610b4e57600080fd5b5061049f61251a565b6002600f541415610b835760405162461bcd60e51b8152600401610b7a906141ce565b60405180910390fd5b6002600f55601a54600d5410610bd25760405162461bcd60e51b8152602060048201526014602482015273151bdd185b081cdd5c1c1b1e481c995858da195960621b6044820152606401610b7a565b610be0600d80546001019055565b6000610beb600d5490565b9050610bf76011612525565b60008281526012602052604080822092909255601054601954925191926001600160a01b03909116918381818185875af1925050503d8060008114610c58576040519150601f19603f3d011682016040523d82523d6000602084013e610c5d565b606091505b5050905080610c7e5760405162461bcd60e51b8152600401610b7a90614120565b6000610c95601954346127a190919063ffffffff16565b90508015610d0757604051600090339083908381818185875af1925050503d8060008114610cdf576040519150601f19603f3d011682016040523d82523d6000602084013e610ce4565b606091505b5050905080610d055760405162461bcd60e51b8152600401610b7a90614060565b505b610d1133846127ad565b827f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da6012600086815260200190815260200160002054604051610d5691815260200190565b60405180910390a2600083815260126020526040808220546019549151869360008051602061446d83398151915293610d929391928390614022565b60405180910390a250506001600f5550565b6010546001600160a01b03163314610dce5760405162461bcd60e51b8152600401610b7a906140e9565b60198190556040518181527f6a08b3bba14e54ee218389c7c7444e619f3897465dc06757938cfd01a6957f6c906020015b60405180910390a150565b6000610e15826128fb565b92915050565b606060028054610e2a90614395565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5690614395565b8015610ea35780601f10610e7857610100808354040283529160200191610ea3565b820191906000526020600020905b815481529060010190602001808311610e8657829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b0316610f265760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b7a565b506000908152600660205260409020546001600160a01b031690565b6000610f4d8261176f565b9050806001600160a01b0316836001600160a01b03161415610fbb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b7a565b336001600160a01b0382161480610fd75750610fd78133610ae9565b6110495760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b7a565b6110538383612920565b505050565b611063335b8261298e565b61107f5760405162461bcd60e51b8152600401610b7a9061417d565b611053838383612a85565b6010546001600160a01b031633146110b45760405162461bcd60e51b8152600401610b7a906140e9565b60178190556040518181527fb1d78271daba9a366098d40b64d642a1399cabaa22c5234bacc87e92cef82ae690602001610dff565b6000828152602081905260409020600101546111058133612c2c565b6110538383612c90565b600061111a8361199f565b821061117c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b7a565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6001600160a01b03811633146112155760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b7a565b61121f8282612cb2565b5050565b61124d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611d85565b6112c1576040805162461bcd60e51b81526020600482015260248101919091527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20756e70617573656064820152608401610b7a565b6112c9612cd4565b565b61105383838360405180602001604052806000815250612035565b6112ef3361105d565b6113545760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610b7a565b61135d81612d67565b50565b600061136b600a5490565b82106113ce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b7a565b600a82815481106113ef57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6010546001600160a01b0316331461142b5760405162461bcd60e51b8152600401610b7a906140e9565b61143481612e0e565b7f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf681604051610dff919061404d565b6002600f5414156114865760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55806114d85760405162461bcd60e51b815260206004820152601c60248201527f4261736520636861726163746572206e6f74206d6f72706861626c65000000006044820152606401610b7a565b6114e182612e21565b60006114ec8361215e565b6010546040519192506000916001600160a01b039091169083908381818185875af1925050503d806000811461153e576040519150601f19603f3d011682016040523d82523d6000602084013e611543565b606091505b50509050806115645760405162461bcd60e51b8152600401610b7a90614120565b600061157034846127a1565b905080156115e257604051600090339083908381818185875af1925050503d80600081146115ba576040519150601f19603f3d011682016040523d82523d6000602084013e6115bf565b606091505b50509050806115e05760405162461bcd60e51b8152600401610b7a90614060565b505b6000858152601260205260408120549060646115fe6011612525565b61160891906143eb565b9050611615828288612ed5565b6000888152601260209081526040808320939093556015905290812080549161163d836143d0565b90915550506000878152601660209081526040808320805460ff19166001908117909155601290925291829020549151899260008051602061446d8339815191529261168d928792918b91614022565b60405180910390a250506001600f555050505050565b6010546001600160a01b031633146116cd5760405162461bcd60e51b8152600401610b7a906140e9565b80516116e0906013906020840190613b14565b507f4a826ca029d05af64e411551e15f7ee1e70af0b9bc43a31154ace86a863397b481604051610dff919061404d565b6010546001600160a01b0316331461173a5760405162461bcd60e51b8152600401610b7a906140e9565b601b8190556040518181527fa0e0113404674c6f545b966e8ec54db3066a6c720a0054f0bc4b0c900cfff24390602001610dff565b6000818152600460205260408120546001600160a01b031680610e155760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b7a565b6002600f5414156118095760405162461bcd60e51b8152600401610b7a906141ce565b6002600f553360009081526014602052604090205460ff1661186d5760405162461bcd60e51b815260206004820152601a60248201527f4e6f742063616c6c65642066726f6d207468652074756e6e656c0000000000006044820152606401610b7a565b6000848152601260208181526040808420805488825560168452828620805460ff191689151517905560158452919094208590559190529054859060008051602061446d8339815191529083906118c38461215e565b60016040516118d59493929190614022565b60405180910390a250506001600f55505050565b60405162461bcd60e51b815260206004820152601760248201527f53686f756c64206e6f74207573652074686973206f6e650000000000000000006044820152606401610b7a565b606061193b612fdc565b905090565b6010546001600160a01b0316331461196a5760405162461bcd60e51b8152600401610b7a906140e9565b601a8190556040518181527f28a10a2e0b5582da7164754cb994f6214b8af6aa7f7e003305fbc09e7106c51390602001610dff565b60006001600160a01b038216611a0a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b7a565b506001600160a01b031660009081526005602052604090205490565b6002600f541415611a495760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55601c546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b158015611a9257600080fd5b505afa158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190613c54565b6001600160a01b0316336001600160a01b031614611ae757600080fd5b601c5460405163352df34360e11b8152600481018390526000916001600160a01b031690636a5be6869060240160206040518083038186803b158015611b2c57600080fd5b505afa158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190613e9f565b601c54604051630852cd8d60e31b8152600481018590529192506001600160a01b0316906342966c6890602401600060405180830381600087803b158015611bab57600080fd5b505af1158015611bbf573d6000803e3d6000fd5b5050601d54611bd2925090506001612feb565b601d55601a54611be3906001612feb565b601a55611bf4600d80546001019055565b6000611bff600d5490565b60008181526012602052604090208390559050611c1d335b826127ad565b807f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da6012600084815260200190815260200160002054604051611c6291815260200190565b60405180910390a280837f5bc298e251bf2d0dbbd7881e135ad8526c53dab8acd7e9777aea2c809fdf47e06012600085815260200190815260200160002054604051611cb091815260200190565b60405180910390a350506001600f5550565b611cec7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611d85565b611d5e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20706175736500006064820152608401610b7a565b6112c9612ff7565b6000828152600160205260408120611d7e9083613072565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b606060038054610e2a90614395565b6010546001600160a01b03163314611de75760405162461bcd60e51b8152600401610b7a906140e9565b60188190556040518181527fff4da8d01e7184cc8c9d6c57d64b336b1de6d676b6215408967bd071c8da7e3d90602001610dff565b6002600f541415611e3f5760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55611e4d81612e21565b6010546018546040516000926001600160a01b031691908381818185875af1925050503d8060008114611e9c576040519150601f19603f3d011682016040523d82523d6000602084013e611ea1565b606091505b5050905080611ec25760405162461bcd60e51b8152600401610b7a90614120565b6000611ed9601854346127a190919063ffffffff16565b90508015611f4b57604051600090339083908381818185875af1925050503d8060008114611f23576040519150601f19603f3d011682016040523d82523d6000602084013e611f28565b606091505b5050905080611f495760405162461bcd60e51b8152600401610b7a90614060565b505b600083815260126020526040902054611f646011612525565b6000858152601260208181526040808420948555601582528084208490556016825292839020805460ff1916600190811790915591905291546018549151879360008051602061446d83398151915293611fc2938793909290614022565b60405180910390a250506001600f555050565b61121f33838361307e565b6010546001600160a01b0316331461200a5760405162461bcd60e51b8152600401610b7a906140e9565b6001600160a01b03919091166000908152601460205260409020805460ff1916911515919091179055565b61203f338361298e565b61205b5760405162461bcd60e51b8152600401610b7a9061417d565b6120678484848461314d565b50505050565b6000818152600460205260409020546060906001600160a01b03166120ec5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b7a565b60006120f6612fdc565b905060008151116121165760405180602001604052806000815250611d7e565b8061212084613180565b604051602001612131929190613f41565b6040516020818303038152906040529392505050565b6000818152600160205260408120610e159061329a565b600081815260156020526040812054601754611d7e906001831b6132a4565b6000828152602081905260409020600101546121998133612c2c565b6110538383612cb2565b6002600f5414156121c65760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55601b548111156122305760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f742062756c6b20627579206d6f7265207468616e20746865207072604482015269195cd95d081b1a5b5a5d60b21b6064820152608401610b7a565b601a5461224682612240600d5490565b90612feb565b111561228b5760405162461bcd60e51b8152602060048201526014602482015273151bdd185b081cdd5c1c1b1e481c995858da195960621b6044820152606401610b7a565b6010546019546000916001600160a01b0316906122a890846132a4565b604051600081818185875af1925050503d80600081146122e4576040519150601f19603f3d011682016040523d82523d6000602084013e6122e9565b606091505b505090508061230a5760405162461bcd60e51b8152600401610b7a90614120565b600061232b612324846019546132a490919063ffffffff16565b34906127a1565b9050801561239d57604051600090339083908381818185875af1925050503d8060008114612375576040519150601f19603f3d011682016040523d82523d6000602084013e61237a565b606091505b505090508061239b5760405162461bcd60e51b8152600401610b7a90614060565b505b60005b83811015612481576123b6600d80546001019055565b60006123c1600d5490565b90506123cd6011612525565b6000828152601260205260409020556123e533611c17565b807f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da601260008481526020019081526020016000205460405161242a91815260200190565b60405180910390a2600081815260126020526040808220546019549151849360008051602061446d833981519152936124669391928390614022565b60405180910390a25080612479816143d0565b9150506123a0565b50506001600f555050565b6013805461249990614395565b80601f01602080910402602001604051908101604052809291908181526020018280546124c590614395565b80156125125780601f106124e757610100808354040283529160200191612512565b820191906000526020600020905b8154815290600101906020018083116124f557829003601f168201915b505050505081565b600061193b600d5490565b600033325a84544243804061253b60648361433b565b6040516bffffffffffffffffffffffff196060998a1b811660208301529790981b909616603488015260488701949094526068860192909252608885015260a884015260c88301524060e88201526101080160408051601f198184030181528282528051602091820120908301520160408051601f198184030181529190528051602090910120918290555090565b80546001019055565b5490565b6125e18282611d85565b61121f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556126173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611d7e836001600160a01b0384166132b0565b6110538383835b6126828383836126e9565b600c5460ff16156110535760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610b7a565b6001600160a01b0383166127445761273f81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b612767565b816001600160a01b0316836001600160a01b0316146127675761276783826132ff565b6001600160a01b03821661277e576110538161339c565b826001600160a01b0316826001600160a01b031614611053576110538282613475565b6000611d7e828461433b565b6001600160a01b0382166128035760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b7a565b6000818152600460205260409020546001600160a01b0316156128685760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b7a565b612874600083836134b9565b6001600160a01b038216600090815260056020526040812080546001929061289d908490614205565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b0319821663780e9d6360e01b1480610e155750610e1582613505565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906129558261176f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b0316612a075760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b7a565b6000612a128361176f565b9050806001600160a01b0316846001600160a01b03161480612a4d5750836001600160a01b0316612a4284610ead565b6001600160a01b0316145b80612a7d57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612a988261176f565b6001600160a01b031614612afc5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b7a565b6001600160a01b038216612b5e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b7a565b612b698383836134b9565b612b74600082612920565b6001600160a01b0383166000908152600560205260408120805460019290612b9d90849061433b565b90915550506001600160a01b0382166000908152600560205260408120805460019290612bcb908490614205565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612c368282611d85565b61121f57612c4e816001600160a01b03166014613545565b612c59836020613545565b604051602001612c6a929190613f70565b60408051601f198184030181529082905262461bcd60e51b8252610b7a9160040161404d565b612c9a82826125d7565b6000828152600160205260409020611053908261265b565b612cbc8282613727565b6000828152600160205260409020611053908261378c565b600c5460ff16612d1d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b7a565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000612d728261176f565b9050612d80816000846134b9565b612d8b600083612920565b6001600160a01b0381166000908152600560205260408120805460019290612db490849061433b565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b805161121f90600e906020840190613b14565b333b15612e705760405162461bcd60e51b815260206004820152601b60248201527f43616c6c65722063616e6e6f74206265206120636f6e747261637400000000006044820152606401610b7a565b333214612ecb5760405162461bcd60e51b8152602060048201526024808201527f4d73672073656e6465722073686f756c64206265206f726967696e616c206361604482015263363632b960e11b6064820152608401610b7a565b61135d81336137a1565b600060268210612f1b5760405162461bcd60e51b81526020600482015260116024820152702130b21033b2b732903837b9b4ba34b7b760791b6044820152606401610b7a565b60008215612f4657612f43612f3184600261431c565b612f3c90600a614274565b8690613840565b90505b6000612f9d612f56856001614205565b612f6190600261431c565b612f6c90600a614274565b612f97612f7a876001614205565b612f8590600261431c565b612f9090600a614274565b899061384c565b906132a4565b90506000612fac85600261431c565b612fb790600a614274565b612fc1908761431c565b9050612fd1836122408484612feb565b979650505050505050565b6060600e8054610e2a90614395565b6000611d7e8284614205565b600c5460ff161561303d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b7a565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d4a3390565b6000611d7e8383613858565b816001600160a01b0316836001600160a01b031614156130e05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b7a565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613158848484612a85565b61316484848484613890565b6120675760405162461bcd60e51b8152600401610b7a90614097565b6060816131a45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156131ce57806131b8816143d0565b91506131c79050600a8361421d565b91506131a8565b60008167ffffffffffffffff8111156131f757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613221576020820181803683370190505b5090505b8415612a7d5761323660018361433b565b9150613243600a866143eb565b61324e906030614205565b60f81b81838151811061327157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613293600a8661421d565b9450613225565b6000610e15825490565b6000611d7e828461431c565b60008181526001830160205260408120546132f757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e15565b506000610e15565b6000600161330c8461199f565b613316919061433b565b600083815260096020526040902054909150808214613369576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a546000906133ae9060019061433b565b6000838152600b6020526040812054600a80549394509092849081106133e457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a838154811061341357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a80548061345957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006134808361199f565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6134c4838383612670565b600081815260126020526040808220549051839260008051602061446d833981519152926134f89290918291600290614022565b60405180910390a2505050565b60006001600160e01b031982166380ac58cd60e01b148061353657506001600160e01b03198216635b5e139f60e01b145b80610e155750610e158261399d565b6060600061355483600261431c565b61355f906002614205565b67ffffffffffffffff81111561358557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156135af576020820181803683370190505b509050600360fc1b816000815181106135d857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061361557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061363984600261431c565b613644906001614205565b90505b60018111156136d8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061368657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106136aa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936136d18161437e565b9050613647565b508315611d7e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b7a565b6137318282611d85565b1561121f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611d7e836001600160a01b0384166139c2565b806001600160a01b03166137b48361176f565b6001600160a01b03161461121f5760405162461bcd60e51b815260206004820152604760248201527f506f6c796d6f7270685769746847656e654368616e6765723a2063616e6e6f7460448201527f206368616e67652067656e6f6d65206f6620746f6b656e2074686174206973206064820152663737ba1037bbb760c91b608482015260a401610b7a565b6000611d7e82846143eb565b6000611d7e828461421d565b600082600001828154811061387d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b1561399257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906138d4903390899088908890600401613fe5565b602060405180830381600087803b1580156138ee57600080fd5b505af192505050801561391e575060408051601f3d908101601f1916820190925261391b91810190613e3d565b60015b613978573d80801561394c576040519150601f19603f3d011682016040523d82523d6000602084013e613951565b606091505b5080516139705760405162461bcd60e51b8152600401610b7a90614097565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612a7d565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b1480610e155750610e1582613adf565b60008181526001830160205260408120548015613ad55760006139e660018361433b565b85549091506000906139fa9060019061433b565b9050818114613a7b576000866000018281548110613a2857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613a5957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613a9a57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e15565b6000915050610e15565b60006001600160e01b03198216637965db0b60e01b1480610e1557506301ffc9a760e01b6001600160e01b0319831614610e15565b828054613b2090614395565b90600052602060002090601f016020900481019282613b425760008555613b88565b82601f10613b5b57805160ff1916838001178555613b88565b82800160010185558215613b88579182015b82811115613b88578251825591602001919060010190613b6d565b50613b94929150613b98565b5090565b5b80821115613b945760008155600101613b99565b600067ffffffffffffffff80841115613bc857613bc861442b565b604051601f8501601f19908116603f01168101908282118183101715613bf057613bf061442b565b81604052809350858152868686011115613c0957600080fd5b858560208301376000602087830101525050509392505050565b80358015158114613c3357600080fd5b919050565b600060208284031215613c49578081fd5b8135611d7e81614441565b600060208284031215613c65578081fd5b8151611d7e81614441565b60008060408385031215613c82578081fd5b8235613c8d81614441565b91506020830135613c9d81614441565b809150509250929050565b600080600060608486031215613cbc578081fd5b8335613cc781614441565b92506020840135613cd781614441565b929592945050506040919091013590565b60008060008060808587031215613cfd578081fd5b8435613d0881614441565b93506020850135613d1881614441565b925060408501359150606085013567ffffffffffffffff811115613d3a578182fd5b8501601f81018713613d4a578182fd5b613d5987823560208401613bad565b91505092959194509250565b60008060408385031215613d77578182fd5b8235613d8281614441565b9150613d9060208401613c23565b90509250929050565b60008060408385031215613dab578182fd5b8235613db681614441565b946020939093013593505050565b600060208284031215613dd5578081fd5b5035919050565b60008060408385031215613dee578182fd5b823591506020830135613c9d81614441565b60008060408385031215613e12578182fd5b50508035926020909101359150565b600060208284031215613e32578081fd5b8135611d7e81614456565b600060208284031215613e4e578081fd5b8151611d7e81614456565b600060208284031215613e6a578081fd5b813567ffffffffffffffff811115613e80578182fd5b8201601f81018413613e90578182fd5b612a7d84823560208401613bad565b600060208284031215613eb0578081fd5b5051919050565b60008060008060808587031215613ecc578182fd5b8435935060208501359250613ee360408601613c23565b9396929550929360600135925050565b60008151808452613f0b816020860160208601614352565b601f01601f19169290920160200192915050565b60038110613f3d57634e487b7160e01b600052602160045260246000fd5b9052565b60008351613f53818460208801614352565b835190830190613f67818360208801614352565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613fa8816017850160208801614352565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613fd9816028840160208801614352565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061401890830184613ef3565b9695505050505050565b8481526020810184905260408101839052608081016140446060830184613f1f565b95945050505050565b602081526000611d7e6020830184613ef3565b60208082526018908201527f4661696c656420746f2072657475726e206578636573732e0000000000000000604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526017908201527f4e6f742063616c6c65642066726f6d207468652064616f000000000000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115614218576142186143ff565b500190565b60008261422c5761422c614415565b500490565b600181815b8085111561426c578160001904821115614252576142526143ff565b8085161561425f57918102915b93841c9390800290614236565b509250929050565b6000611d7e838360008261428a57506001610e15565b8161429757506000610e15565b81600181146142ad57600281146142b7576142d3565b6001915050610e15565b60ff8411156142c8576142c86143ff565b50506001821b610e15565b5060208310610133831016604e8410600b84101617156142f6575081810a610e15565b6143008383614231565b8060001904821115614314576143146143ff565b029392505050565b6000816000190483118215151615614336576143366143ff565b500290565b60008282101561434d5761434d6143ff565b500390565b60005b8381101561436d578181015183820152602001614355565b838111156120675750506000910152565b60008161438d5761438d6143ff565b506000190190565b600181811c908216806143a957607f821691505b602082108114156143ca57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156143e4576143e46143ff565b5060010190565b6000826143fa576143fa614415565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461135d57600080fd5b6001600160e01b03198116811461135d57600080fdfe8c0bdd7bca83c4e0c810cbecf44bc544a9dc0b9f265664e31ce0ce85f07a052ba2646970667358221220e3b6c00bc3708391cc69075b7b5c559b6c7c989ffdb37f8bf70b36f7c1ffdd5364736f6c63430008040033","deployedBytecode":"0x6080604052600436106103a65760003560e01c80636a627842116101e7578063ab39a3c81161010d578063d547741f116100a0578063e985e9c51161006f578063e985e9c514610ace578063ec9c074c14610b17578063f528a62714610b2d578063f84ddf0b14610b4257600080fd5b8063d547741f14610a51578063d5a83d3e14610a71578063d5abeb0114610a84578063e63ab1e914610a9a57600080fd5b8063cccb6d0d116100dc578063cccb6d0d146109b7578063ce14617d146109e7578063d45351e5146109fd578063d539139314610a1d57600080fd5b8063ab39a3c814610937578063b88d4fde14610957578063c87b56dd14610977578063ca15c8731461099757600080fd5b80639010d07c116101855780639e7bb467116101545780639e7bb467146108d9578063a217fddf146108ec578063a22cb46514610901578063a49bccca1461092157600080fd5b80639010d07c1461086457806391d148541461088457806395d89b41146108a457806398c5c078146108b957600080fd5b8063704ec036116101c1578063704ec036146107f957806370a082311461080f578063784996a01461082f5780638456cb591461084f57600080fd5b80636a627842146107a45780636c0360eb146107c45780636f8b44b0146107d957600080fd5b80632f745c59116102cc57806355f804b31161026a5780635e468dfd116102395780635e468dfd146107175780636352211e146107375780636a1c03dc146107575780636a5be6861461077757600080fd5b806355f804b3146106ac57806356a5c926146106cc57806356b1b300146106df5780635c975abb146106ff57600080fd5b806342842e0e116102a657806342842e0e1461061c57806342966c681461063c5780634df774161461065c5780634f6ccce71461068c57600080fd5b80632f745c59146105c757806336568abe146105e75780633f4ba83a1461060757600080fd5b806318160ddd11610344578063248a9ca311610313578063248a9ca31461053757806325b081ff14610567578063289ea0a9146105875780632f2ff15d146105a757600080fd5b806318160ddd146104b55780632131c68c146104ca57806323b872dd146104ea57806323c8d07a1461050a57600080fd5b8063081812fc11610380578063081812fc14610431578063095ea7b3146104695780630a727edf146104895780631249c58b146104ad57600080fd5b8063017f1e34146103ba57806301ffc9a7146103da57806306fdde031461040f57600080fd5b366103b5576103b3610b57565b005b600080fd5b3480156103c657600080fd5b506103b36103d5366004613dc4565b610da4565b3480156103e657600080fd5b506103fa6103f5366004613e21565b610e0a565b60405190151581526020015b60405180910390f35b34801561041b57600080fd5b50610424610e1b565b604051610406919061404d565b34801561043d57600080fd5b5061045161044c366004613dc4565b610ead565b6040516001600160a01b039091168152602001610406565b34801561047557600080fd5b506103b3610484366004613d99565b610f42565b34801561049557600080fd5b5061049f601d5481565b604051908152602001610406565b6103b3610b57565b3480156104c157600080fd5b50600a5461049f565b3480156104d657600080fd5b50601054610451906001600160a01b031681565b3480156104f657600080fd5b506103b3610505366004613ca8565b611058565b34801561051657600080fd5b5061049f610525366004613dc4565b60009081526015602052604090205490565b34801561054357600080fd5b5061049f610552366004613dc4565b60009081526020819052604090206001015490565b34801561057357600080fd5b50601c54610451906001600160a01b031681565b34801561059357600080fd5b506103b36105a2366004613dc4565b61108a565b3480156105b357600080fd5b506103b36105c2366004613ddc565b6110e9565b3480156105d357600080fd5b5061049f6105e2366004613d99565b61110f565b3480156105f357600080fd5b506103b3610602366004613ddc565b6111a5565b34801561061357600080fd5b506103b3611223565b34801561062857600080fd5b506103b3610637366004613ca8565b6112cb565b34801561064857600080fd5b506103b3610657366004613dc4565b6112e6565b34801561066857600080fd5b506103fa610677366004613dc4565b60166020526000908152604090205460ff1681565b34801561069857600080fd5b5061049f6106a7366004613dc4565b611360565b3480156106b857600080fd5b506103b36106c7366004613e59565b611401565b6103b36106da366004613e00565b611463565b3480156106eb57600080fd5b506103b36106fa366004613e59565b6116a3565b34801561070b57600080fd5b50600c5460ff166103fa565b34801561072357600080fd5b506103b3610732366004613dc4565b611710565b34801561074357600080fd5b50610451610752366004613dc4565b61176f565b34801561076357600080fd5b506103b3610772366004613eb7565b6117e6565b34801561078357600080fd5b5061049f610792366004613dc4565b60009081526012602052604090205490565b3480156107b057600080fd5b506103b36107bf366004613c38565b6118e9565b3480156107d057600080fd5b50610424611931565b3480156107e557600080fd5b506103b36107f4366004613dc4565b611940565b34801561080557600080fd5b5061049f60195481565b34801561081b57600080fd5b5061049f61082a366004613c38565b61199f565b34801561083b57600080fd5b506103b361084a366004613dc4565b611a26565b34801561085b57600080fd5b506103b3611cc2565b34801561087057600080fd5b5061045161087f366004613e00565b611d66565b34801561089057600080fd5b506103fa61089f366004613ddc565b611d85565b3480156108b057600080fd5b50610424611dae565b3480156108c557600080fd5b506103b36108d4366004613dc4565b611dbd565b6103b36108e7366004613dc4565b611e1c565b3480156108f857600080fd5b5061049f600081565b34801561090d57600080fd5b506103b361091c366004613d65565b611fd5565b34801561092d57600080fd5b5061049f601b5481565b34801561094357600080fd5b506103b3610952366004613d65565b611fe0565b34801561096357600080fd5b506103b3610972366004613ce8565b612035565b34801561098357600080fd5b50610424610992366004613dc4565b61206d565b3480156109a357600080fd5b5061049f6109b2366004613dc4565b612147565b3480156109c357600080fd5b506103fa6109d2366004613c38565b60146020526000908152604090205460ff1681565b3480156109f357600080fd5b5061049f60175481565b348015610a0957600080fd5b5061049f610a18366004613dc4565b61215e565b348015610a2957600080fd5b5061049f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610a5d57600080fd5b506103b3610a6c366004613ddc565b61217d565b6103b3610a7f366004613dc4565b6121a3565b348015610a9057600080fd5b5061049f601a5481565b348015610aa657600080fd5b5061049f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610ada57600080fd5b506103fa610ae9366004613c70565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610b2357600080fd5b5061049f60185481565b348015610b3957600080fd5b5061042461248c565b348015610b4e57600080fd5b5061049f61251a565b6002600f541415610b835760405162461bcd60e51b8152600401610b7a906141ce565b60405180910390fd5b6002600f55601a54600d5410610bd25760405162461bcd60e51b8152602060048201526014602482015273151bdd185b081cdd5c1c1b1e481c995858da195960621b6044820152606401610b7a565b610be0600d80546001019055565b6000610beb600d5490565b9050610bf76011612525565b60008281526012602052604080822092909255601054601954925191926001600160a01b03909116918381818185875af1925050503d8060008114610c58576040519150601f19603f3d011682016040523d82523d6000602084013e610c5d565b606091505b5050905080610c7e5760405162461bcd60e51b8152600401610b7a90614120565b6000610c95601954346127a190919063ffffffff16565b90508015610d0757604051600090339083908381818185875af1925050503d8060008114610cdf576040519150601f19603f3d011682016040523d82523d6000602084013e610ce4565b606091505b5050905080610d055760405162461bcd60e51b8152600401610b7a90614060565b505b610d1133846127ad565b827f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da6012600086815260200190815260200160002054604051610d5691815260200190565b60405180910390a2600083815260126020526040808220546019549151869360008051602061446d83398151915293610d929391928390614022565b60405180910390a250506001600f5550565b6010546001600160a01b03163314610dce5760405162461bcd60e51b8152600401610b7a906140e9565b60198190556040518181527f6a08b3bba14e54ee218389c7c7444e619f3897465dc06757938cfd01a6957f6c906020015b60405180910390a150565b6000610e15826128fb565b92915050565b606060028054610e2a90614395565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5690614395565b8015610ea35780601f10610e7857610100808354040283529160200191610ea3565b820191906000526020600020905b815481529060010190602001808311610e8657829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b0316610f265760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b7a565b506000908152600660205260409020546001600160a01b031690565b6000610f4d8261176f565b9050806001600160a01b0316836001600160a01b03161415610fbb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b7a565b336001600160a01b0382161480610fd75750610fd78133610ae9565b6110495760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b7a565b6110538383612920565b505050565b611063335b8261298e565b61107f5760405162461bcd60e51b8152600401610b7a9061417d565b611053838383612a85565b6010546001600160a01b031633146110b45760405162461bcd60e51b8152600401610b7a906140e9565b60178190556040518181527fb1d78271daba9a366098d40b64d642a1399cabaa22c5234bacc87e92cef82ae690602001610dff565b6000828152602081905260409020600101546111058133612c2c565b6110538383612c90565b600061111a8361199f565b821061117c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b7a565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6001600160a01b03811633146112155760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b7a565b61121f8282612cb2565b5050565b61124d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611d85565b6112c1576040805162461bcd60e51b81526020600482015260248101919091527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20756e70617573656064820152608401610b7a565b6112c9612cd4565b565b61105383838360405180602001604052806000815250612035565b6112ef3361105d565b6113545760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610b7a565b61135d81612d67565b50565b600061136b600a5490565b82106113ce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b7a565b600a82815481106113ef57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6010546001600160a01b0316331461142b5760405162461bcd60e51b8152600401610b7a906140e9565b61143481612e0e565b7f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf681604051610dff919061404d565b6002600f5414156114865760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55806114d85760405162461bcd60e51b815260206004820152601c60248201527f4261736520636861726163746572206e6f74206d6f72706861626c65000000006044820152606401610b7a565b6114e182612e21565b60006114ec8361215e565b6010546040519192506000916001600160a01b039091169083908381818185875af1925050503d806000811461153e576040519150601f19603f3d011682016040523d82523d6000602084013e611543565b606091505b50509050806115645760405162461bcd60e51b8152600401610b7a90614120565b600061157034846127a1565b905080156115e257604051600090339083908381818185875af1925050503d80600081146115ba576040519150601f19603f3d011682016040523d82523d6000602084013e6115bf565b606091505b50509050806115e05760405162461bcd60e51b8152600401610b7a90614060565b505b6000858152601260205260408120549060646115fe6011612525565b61160891906143eb565b9050611615828288612ed5565b6000888152601260209081526040808320939093556015905290812080549161163d836143d0565b90915550506000878152601660209081526040808320805460ff19166001908117909155601290925291829020549151899260008051602061446d8339815191529261168d928792918b91614022565b60405180910390a250506001600f555050505050565b6010546001600160a01b031633146116cd5760405162461bcd60e51b8152600401610b7a906140e9565b80516116e0906013906020840190613b14565b507f4a826ca029d05af64e411551e15f7ee1e70af0b9bc43a31154ace86a863397b481604051610dff919061404d565b6010546001600160a01b0316331461173a5760405162461bcd60e51b8152600401610b7a906140e9565b601b8190556040518181527fa0e0113404674c6f545b966e8ec54db3066a6c720a0054f0bc4b0c900cfff24390602001610dff565b6000818152600460205260408120546001600160a01b031680610e155760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b7a565b6002600f5414156118095760405162461bcd60e51b8152600401610b7a906141ce565b6002600f553360009081526014602052604090205460ff1661186d5760405162461bcd60e51b815260206004820152601a60248201527f4e6f742063616c6c65642066726f6d207468652074756e6e656c0000000000006044820152606401610b7a565b6000848152601260208181526040808420805488825560168452828620805460ff191689151517905560158452919094208590559190529054859060008051602061446d8339815191529083906118c38461215e565b60016040516118d59493929190614022565b60405180910390a250506001600f55505050565b60405162461bcd60e51b815260206004820152601760248201527f53686f756c64206e6f74207573652074686973206f6e650000000000000000006044820152606401610b7a565b606061193b612fdc565b905090565b6010546001600160a01b0316331461196a5760405162461bcd60e51b8152600401610b7a906140e9565b601a8190556040518181527f28a10a2e0b5582da7164754cb994f6214b8af6aa7f7e003305fbc09e7106c51390602001610dff565b60006001600160a01b038216611a0a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b7a565b506001600160a01b031660009081526005602052604090205490565b6002600f541415611a495760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55601c546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b158015611a9257600080fd5b505afa158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190613c54565b6001600160a01b0316336001600160a01b031614611ae757600080fd5b601c5460405163352df34360e11b8152600481018390526000916001600160a01b031690636a5be6869060240160206040518083038186803b158015611b2c57600080fd5b505afa158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190613e9f565b601c54604051630852cd8d60e31b8152600481018590529192506001600160a01b0316906342966c6890602401600060405180830381600087803b158015611bab57600080fd5b505af1158015611bbf573d6000803e3d6000fd5b5050601d54611bd2925090506001612feb565b601d55601a54611be3906001612feb565b601a55611bf4600d80546001019055565b6000611bff600d5490565b60008181526012602052604090208390559050611c1d335b826127ad565b807f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da6012600084815260200190815260200160002054604051611c6291815260200190565b60405180910390a280837f5bc298e251bf2d0dbbd7881e135ad8526c53dab8acd7e9777aea2c809fdf47e06012600085815260200190815260200160002054604051611cb091815260200190565b60405180910390a350506001600f5550565b611cec7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611d85565b611d5e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20706175736500006064820152608401610b7a565b6112c9612ff7565b6000828152600160205260408120611d7e9083613072565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b606060038054610e2a90614395565b6010546001600160a01b03163314611de75760405162461bcd60e51b8152600401610b7a906140e9565b60188190556040518181527fff4da8d01e7184cc8c9d6c57d64b336b1de6d676b6215408967bd071c8da7e3d90602001610dff565b6002600f541415611e3f5760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55611e4d81612e21565b6010546018546040516000926001600160a01b031691908381818185875af1925050503d8060008114611e9c576040519150601f19603f3d011682016040523d82523d6000602084013e611ea1565b606091505b5050905080611ec25760405162461bcd60e51b8152600401610b7a90614120565b6000611ed9601854346127a190919063ffffffff16565b90508015611f4b57604051600090339083908381818185875af1925050503d8060008114611f23576040519150601f19603f3d011682016040523d82523d6000602084013e611f28565b606091505b5050905080611f495760405162461bcd60e51b8152600401610b7a90614060565b505b600083815260126020526040902054611f646011612525565b6000858152601260208181526040808420948555601582528084208490556016825292839020805460ff1916600190811790915591905291546018549151879360008051602061446d83398151915293611fc2938793909290614022565b60405180910390a250506001600f555050565b61121f33838361307e565b6010546001600160a01b0316331461200a5760405162461bcd60e51b8152600401610b7a906140e9565b6001600160a01b03919091166000908152601460205260409020805460ff1916911515919091179055565b61203f338361298e565b61205b5760405162461bcd60e51b8152600401610b7a9061417d565b6120678484848461314d565b50505050565b6000818152600460205260409020546060906001600160a01b03166120ec5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b7a565b60006120f6612fdc565b905060008151116121165760405180602001604052806000815250611d7e565b8061212084613180565b604051602001612131929190613f41565b6040516020818303038152906040529392505050565b6000818152600160205260408120610e159061329a565b600081815260156020526040812054601754611d7e906001831b6132a4565b6000828152602081905260409020600101546121998133612c2c565b6110538383612cb2565b6002600f5414156121c65760405162461bcd60e51b8152600401610b7a906141ce565b6002600f55601b548111156122305760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f742062756c6b20627579206d6f7265207468616e20746865207072604482015269195cd95d081b1a5b5a5d60b21b6064820152608401610b7a565b601a5461224682612240600d5490565b90612feb565b111561228b5760405162461bcd60e51b8152602060048201526014602482015273151bdd185b081cdd5c1c1b1e481c995858da195960621b6044820152606401610b7a565b6010546019546000916001600160a01b0316906122a890846132a4565b604051600081818185875af1925050503d80600081146122e4576040519150601f19603f3d011682016040523d82523d6000602084013e6122e9565b606091505b505090508061230a5760405162461bcd60e51b8152600401610b7a90614120565b600061232b612324846019546132a490919063ffffffff16565b34906127a1565b9050801561239d57604051600090339083908381818185875af1925050503d8060008114612375576040519150601f19603f3d011682016040523d82523d6000602084013e61237a565b606091505b505090508061239b5760405162461bcd60e51b8152600401610b7a90614060565b505b60005b83811015612481576123b6600d80546001019055565b60006123c1600d5490565b90506123cd6011612525565b6000828152601260205260409020556123e533611c17565b807f5f7666687319b40936f33c188908d86aea154abd3f4127b4fa0a3f04f303c7da601260008481526020019081526020016000205460405161242a91815260200190565b60405180910390a2600081815260126020526040808220546019549151849360008051602061446d833981519152936124669391928390614022565b60405180910390a25080612479816143d0565b9150506123a0565b50506001600f555050565b6013805461249990614395565b80601f01602080910402602001604051908101604052809291908181526020018280546124c590614395565b80156125125780601f106124e757610100808354040283529160200191612512565b820191906000526020600020905b8154815290600101906020018083116124f557829003601f168201915b505050505081565b600061193b600d5490565b600033325a84544243804061253b60648361433b565b6040516bffffffffffffffffffffffff196060998a1b811660208301529790981b909616603488015260488701949094526068860192909252608885015260a884015260c88301524060e88201526101080160408051601f198184030181528282528051602091820120908301520160408051601f198184030181529190528051602090910120918290555090565b80546001019055565b5490565b6125e18282611d85565b61121f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556126173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611d7e836001600160a01b0384166132b0565b6110538383835b6126828383836126e9565b600c5460ff16156110535760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610b7a565b6001600160a01b0383166127445761273f81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b612767565b816001600160a01b0316836001600160a01b0316146127675761276783826132ff565b6001600160a01b03821661277e576110538161339c565b826001600160a01b0316826001600160a01b031614611053576110538282613475565b6000611d7e828461433b565b6001600160a01b0382166128035760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b7a565b6000818152600460205260409020546001600160a01b0316156128685760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b7a565b612874600083836134b9565b6001600160a01b038216600090815260056020526040812080546001929061289d908490614205565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b0319821663780e9d6360e01b1480610e155750610e1582613505565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906129558261176f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b0316612a075760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b7a565b6000612a128361176f565b9050806001600160a01b0316846001600160a01b03161480612a4d5750836001600160a01b0316612a4284610ead565b6001600160a01b0316145b80612a7d57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612a988261176f565b6001600160a01b031614612afc5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b7a565b6001600160a01b038216612b5e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b7a565b612b698383836134b9565b612b74600082612920565b6001600160a01b0383166000908152600560205260408120805460019290612b9d90849061433b565b90915550506001600160a01b0382166000908152600560205260408120805460019290612bcb908490614205565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612c368282611d85565b61121f57612c4e816001600160a01b03166014613545565b612c59836020613545565b604051602001612c6a929190613f70565b60408051601f198184030181529082905262461bcd60e51b8252610b7a9160040161404d565b612c9a82826125d7565b6000828152600160205260409020611053908261265b565b612cbc8282613727565b6000828152600160205260409020611053908261378c565b600c5460ff16612d1d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b7a565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000612d728261176f565b9050612d80816000846134b9565b612d8b600083612920565b6001600160a01b0381166000908152600560205260408120805460019290612db490849061433b565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b805161121f90600e906020840190613b14565b333b15612e705760405162461bcd60e51b815260206004820152601b60248201527f43616c6c65722063616e6e6f74206265206120636f6e747261637400000000006044820152606401610b7a565b333214612ecb5760405162461bcd60e51b8152602060048201526024808201527f4d73672073656e6465722073686f756c64206265206f726967696e616c206361604482015263363632b960e11b6064820152608401610b7a565b61135d81336137a1565b600060268210612f1b5760405162461bcd60e51b81526020600482015260116024820152702130b21033b2b732903837b9b4ba34b7b760791b6044820152606401610b7a565b60008215612f4657612f43612f3184600261431c565b612f3c90600a614274565b8690613840565b90505b6000612f9d612f56856001614205565b612f6190600261431c565b612f6c90600a614274565b612f97612f7a876001614205565b612f8590600261431c565b612f9090600a614274565b899061384c565b906132a4565b90506000612fac85600261431c565b612fb790600a614274565b612fc1908761431c565b9050612fd1836122408484612feb565b979650505050505050565b6060600e8054610e2a90614395565b6000611d7e8284614205565b600c5460ff161561303d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b7a565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d4a3390565b6000611d7e8383613858565b816001600160a01b0316836001600160a01b031614156130e05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b7a565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613158848484612a85565b61316484848484613890565b6120675760405162461bcd60e51b8152600401610b7a90614097565b6060816131a45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156131ce57806131b8816143d0565b91506131c79050600a8361421d565b91506131a8565b60008167ffffffffffffffff8111156131f757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613221576020820181803683370190505b5090505b8415612a7d5761323660018361433b565b9150613243600a866143eb565b61324e906030614205565b60f81b81838151811061327157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613293600a8661421d565b9450613225565b6000610e15825490565b6000611d7e828461431c565b60008181526001830160205260408120546132f757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e15565b506000610e15565b6000600161330c8461199f565b613316919061433b565b600083815260096020526040902054909150808214613369576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a546000906133ae9060019061433b565b6000838152600b6020526040812054600a80549394509092849081106133e457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a838154811061341357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a80548061345957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006134808361199f565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6134c4838383612670565b600081815260126020526040808220549051839260008051602061446d833981519152926134f89290918291600290614022565b60405180910390a2505050565b60006001600160e01b031982166380ac58cd60e01b148061353657506001600160e01b03198216635b5e139f60e01b145b80610e155750610e158261399d565b6060600061355483600261431c565b61355f906002614205565b67ffffffffffffffff81111561358557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156135af576020820181803683370190505b509050600360fc1b816000815181106135d857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061361557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061363984600261431c565b613644906001614205565b90505b60018111156136d8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061368657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106136aa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936136d18161437e565b9050613647565b508315611d7e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b7a565b6137318282611d85565b1561121f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611d7e836001600160a01b0384166139c2565b806001600160a01b03166137b48361176f565b6001600160a01b03161461121f5760405162461bcd60e51b815260206004820152604760248201527f506f6c796d6f7270685769746847656e654368616e6765723a2063616e6e6f7460448201527f206368616e67652067656e6f6d65206f6620746f6b656e2074686174206973206064820152663737ba1037bbb760c91b608482015260a401610b7a565b6000611d7e82846143eb565b6000611d7e828461421d565b600082600001828154811061387d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b1561399257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906138d4903390899088908890600401613fe5565b602060405180830381600087803b1580156138ee57600080fd5b505af192505050801561391e575060408051601f3d908101601f1916820190925261391b91810190613e3d565b60015b613978573d80801561394c576040519150601f19603f3d011682016040523d82523d6000602084013e613951565b606091505b5080516139705760405162461bcd60e51b8152600401610b7a90614097565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612a7d565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b1480610e155750610e1582613adf565b60008181526001830160205260408120548015613ad55760006139e660018361433b565b85549091506000906139fa9060019061433b565b9050818114613a7b576000866000018281548110613a2857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613a5957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613a9a57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e15565b6000915050610e15565b60006001600160e01b03198216637965db0b60e01b1480610e1557506301ffc9a760e01b6001600160e01b0319831614610e15565b828054613b2090614395565b90600052602060002090601f016020900481019282613b425760008555613b88565b82601f10613b5b57805160ff1916838001178555613b88565b82800160010185558215613b88579182015b82811115613b88578251825591602001919060010190613b6d565b50613b94929150613b98565b5090565b5b80821115613b945760008155600101613b99565b600067ffffffffffffffff80841115613bc857613bc861442b565b604051601f8501601f19908116603f01168101908282118183101715613bf057613bf061442b565b81604052809350858152868686011115613c0957600080fd5b858560208301376000602087830101525050509392505050565b80358015158114613c3357600080fd5b919050565b600060208284031215613c49578081fd5b8135611d7e81614441565b600060208284031215613c65578081fd5b8151611d7e81614441565b60008060408385031215613c82578081fd5b8235613c8d81614441565b91506020830135613c9d81614441565b809150509250929050565b600080600060608486031215613cbc578081fd5b8335613cc781614441565b92506020840135613cd781614441565b929592945050506040919091013590565b60008060008060808587031215613cfd578081fd5b8435613d0881614441565b93506020850135613d1881614441565b925060408501359150606085013567ffffffffffffffff811115613d3a578182fd5b8501601f81018713613d4a578182fd5b613d5987823560208401613bad565b91505092959194509250565b60008060408385031215613d77578182fd5b8235613d8281614441565b9150613d9060208401613c23565b90509250929050565b60008060408385031215613dab578182fd5b8235613db681614441565b946020939093013593505050565b600060208284031215613dd5578081fd5b5035919050565b60008060408385031215613dee578182fd5b823591506020830135613c9d81614441565b60008060408385031215613e12578182fd5b50508035926020909101359150565b600060208284031215613e32578081fd5b8135611d7e81614456565b600060208284031215613e4e578081fd5b8151611d7e81614456565b600060208284031215613e6a578081fd5b813567ffffffffffffffff811115613e80578182fd5b8201601f81018413613e90578182fd5b612a7d84823560208401613bad565b600060208284031215613eb0578081fd5b5051919050565b60008060008060808587031215613ecc578182fd5b8435935060208501359250613ee360408601613c23565b9396929550929360600135925050565b60008151808452613f0b816020860160208601614352565b601f01601f19169290920160200192915050565b60038110613f3d57634e487b7160e01b600052602160045260246000fd5b9052565b60008351613f53818460208801614352565b835190830190613f67818360208801614352565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613fa8816017850160208801614352565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613fd9816028840160208801614352565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061401890830184613ef3565b9695505050505050565b8481526020810184905260408101839052608081016140446060830184613f1f565b95945050505050565b602081526000611d7e6020830184613ef3565b60208082526018908201527f4661696c656420746f2072657475726e206578636573732e0000000000000000604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526017908201527f4e6f742063616c6c65642066726f6d207468652064616f000000000000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115614218576142186143ff565b500190565b60008261422c5761422c614415565b500490565b600181815b8085111561426c578160001904821115614252576142526143ff565b8085161561425f57918102915b93841c9390800290614236565b509250929050565b6000611d7e838360008261428a57506001610e15565b8161429757506000610e15565b81600181146142ad57600281146142b7576142d3565b6001915050610e15565b60ff8411156142c8576142c86143ff565b50506001821b610e15565b5060208310610133831016604e8410600b84101617156142f6575081810a610e15565b6143008383614231565b8060001904821115614314576143146143ff565b029392505050565b6000816000190483118215151615614336576143366143ff565b500290565b60008282101561434d5761434d6143ff565b500390565b60005b8381101561436d578181015183820152602001614355565b838111156120675750506000910152565b60008161438d5761438d6143ff565b506000190190565b600181811c908216806143a957607f821691505b602082108114156143ca57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156143e4576143e46143ff565b5060010190565b6000826143fa576143fa614415565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461135d57600080fd5b6001600160e01b03198116811461135d57600080fdfe8c0bdd7bca83c4e0c810cbecf44bc544a9dc0b9f265664e31ce0ce85f07a052ba2646970667358221220e3b6c00bc3708391cc69075b7b5c559b6c7c989ffdb37f8bf70b36f7c1ffdd5364736f6c63430008040033","abi":[{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"baseURI","type":"string"},{"internalType":"address payable","name":"_daoAddress","type":"address"},{"internalType":"uint256","name":"premintedTokensCount","type":"uint256"},{"internalType":"uint256","name":"_baseGenomeChangePrice","type":"uint256"},{"internalType":"uint256","name":"_polymorphPrice","type":"uint256"},{"internalType":"uint256","name":"_maxSupply","type":"uint256"},{"internalType":"uint256","name":"_randomizeGenomePrice","type":"uint256"},{"internalType":"uint256","name":"_bulkBuyLimit","type":"uint256"},{"internalType":"string","name":"_arweaveAssetsJSON","type":"string"},{"internalType":"address","name":"_polymorphV1Address","type":"address"}],"internalType":"struct PolymorphRoot.Params","name":"params","type":"tuple"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"arweaveAssetsJSON","type":"string"}],"name":"ArweaveAssetsJSONChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newGenomeChange","type":"uint256"}],"name":"BaseGenomeChangePriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"baseURI","type":"string"}],"name":"BaseURIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newBulkBuyLimit","type":"uint256"}],"name":"BulkBuyLimitChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newMaxSupply","type":"uint256"}],"name":"MaxSupplyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newPolymorphPrice","type":"uint256"}],"name":"PolymorphPriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newRandomizeGenomePriceChange","type":"uint256"}],"name":"RandomizeGenomePriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"oldTokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"gene","type":"uint256"}],"name":"TokenBurnedAndMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newGene","type":"uint256"}],"name":"TokenMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldGene","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newGene","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"enum Polymorph.PolymorphEventType","name":"eventType","type":"uint8"}],"name":"TokenMorphed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"arweaveAssetsJSON","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseGenomeChangePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"bulkBuy","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"bulkBuyLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burnAndMintNewPolymorph","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newGenomeChangePrice","type":"uint256"}],"name":"changeBaseGenomeChangePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newRandomizeGenomePrice","type":"uint256"}],"name":"changeRandomizeGenomePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"daoAddress","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"geneOf","outputs":[{"internalType":"uint256","name":"gene","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"genomeChanges","outputs":[{"internalType":"uint256","name":"genomeChnages","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"isNotVirgin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"genePosition","type":"uint256"}],"name":"morphGene","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"polymorphPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"polymorphV1Contract","outputs":[{"internalType":"contract Polymorph","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"priceForGenomeChange","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"randomizeGenome","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"randomizeGenomePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_arweaveAssetsJSON","type":"string"}],"name":"setArweaveAssetsJSON","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_baseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bulkBuyLimit","type":"uint256"}],"name":"setBulkBuyLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxSupply","type":"uint256"}],"name":"setMaxSupply","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPolymorphPrice","type":"uint256"}],"name":"setPolymorphPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBurnedV1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bridgeAddress","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"whitelistBridgeAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistTunnelAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"gene","type":"uint256"},{"internalType":"bool","name":"isVirgin","type":"bool"},{"internalType":"uint256","name":"genomeChangesCount","type":"uint256"}],"name":"wormholeUpdateGene","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}